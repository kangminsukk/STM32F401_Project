
F401_I2C_test01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a84  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003c18  08003c18  00013c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c30  08003c30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c30  08003c30  00013c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c38  08003c38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c38  08003c38  00013c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c3c  08003c3c  00013c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08003c4c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08003c4c  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000080c7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001530  00000000  00000000  00028103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  00029638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d0  00000000  00000000  00029d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014a2f  00000000  00000000  0002a458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009453  00000000  00000000  0003ee87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000820ca  00000000  00000000  000482da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ca3a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d80  00000000  00000000  000ca3f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003c00 	.word	0x08003c00

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003c00 	.word	0x08003c00

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
 uint8_t I2C_Slave_Address = 0x44 << 1;
 80004d2:	2388      	movs	r3, #136	; 0x88
 80004d4:	71fb      	strb	r3, [r7, #7]
 uint8_t I2C_data[] = {1};
 80004d6:	2301      	movs	r3, #1
 80004d8:	713b      	strb	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fa9f 	bl	8000a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f86f 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f905 	bl	80006f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e6:	f000 f8d5 	bl	8000694 <MX_I2C1_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 // if(I2C_Status == 1)

		  if(HAL_I2C_Master_Transmit(&hi2c1, I2C_Slave_Address, I2C_data, 2, 1000)!= HAL_OK)
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	b299      	uxth	r1, r3
 80004ee:	1d3a      	adds	r2, r7, #4
 80004f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	2302      	movs	r3, #2
 80004f8:	482d      	ldr	r0, [pc, #180]	; (80005b0 <main+0xe4>)
 80004fa:	f000 ff49 	bl	8001390 <HAL_I2C_Master_Transmit>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d0f2      	beq.n	80004ea <main+0x1e>
		  {
		  FND_COM_LEFT_ON
 8000504:	2201      	movs	r2, #1
 8000506:	2102      	movs	r1, #2
 8000508:	482a      	ldr	r0, [pc, #168]	; (80005b4 <main+0xe8>)
 800050a:	f000 fde3 	bl	80010d4 <HAL_GPIO_WritePin>
 800050e:	2200      	movs	r2, #0
 8000510:	2101      	movs	r1, #1
 8000512:	4828      	ldr	r0, [pc, #160]	; (80005b4 <main+0xe8>)
 8000514:	f000 fdde 	bl	80010d4 <HAL_GPIO_WritePin>
 8000518:	2200      	movs	r2, #0
 800051a:	2110      	movs	r1, #16
 800051c:	4826      	ldr	r0, [pc, #152]	; (80005b8 <main+0xec>)
 800051e:	f000 fdd9 	bl	80010d4 <HAL_GPIO_WritePin>
 8000522:	2201      	movs	r2, #1
 8000524:	2101      	movs	r1, #1
 8000526:	4825      	ldr	r0, [pc, #148]	; (80005bc <main+0xf0>)
 8000528:	f000 fdd4 	bl	80010d4 <HAL_GPIO_WritePin>
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000532:	4821      	ldr	r0, [pc, #132]	; (80005b8 <main+0xec>)
 8000534:	f000 fdce 	bl	80010d4 <HAL_GPIO_WritePin>
		  FND_SEG_NUM8_DISP
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800053e:	481e      	ldr	r0, [pc, #120]	; (80005b8 <main+0xec>)
 8000540:	f000 fdc8 	bl	80010d4 <HAL_GPIO_WritePin>
 8000544:	2200      	movs	r2, #0
 8000546:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800054a:	481c      	ldr	r0, [pc, #112]	; (80005bc <main+0xf0>)
 800054c:	f000 fdc2 	bl	80010d4 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 8000550:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000554:	f000 fad4 	bl	8000b00 <HAL_Delay>
		  FND_COM_RIGHT_ON
 8000558:	2201      	movs	r2, #1
 800055a:	2101      	movs	r1, #1
 800055c:	4815      	ldr	r0, [pc, #84]	; (80005b4 <main+0xe8>)
 800055e:	f000 fdb9 	bl	80010d4 <HAL_GPIO_WritePin>
 8000562:	2200      	movs	r2, #0
 8000564:	2102      	movs	r1, #2
 8000566:	4813      	ldr	r0, [pc, #76]	; (80005b4 <main+0xe8>)
 8000568:	f000 fdb4 	bl	80010d4 <HAL_GPIO_WritePin>
 800056c:	2201      	movs	r2, #1
 800056e:	2110      	movs	r1, #16
 8000570:	4811      	ldr	r0, [pc, #68]	; (80005b8 <main+0xec>)
 8000572:	f000 fdaf 	bl	80010d4 <HAL_GPIO_WritePin>
 8000576:	2200      	movs	r2, #0
 8000578:	2101      	movs	r1, #1
 800057a:	4810      	ldr	r0, [pc, #64]	; (80005bc <main+0xf0>)
 800057c:	f000 fdaa 	bl	80010d4 <HAL_GPIO_WritePin>
 8000580:	2200      	movs	r2, #0
 8000582:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000586:	480c      	ldr	r0, [pc, #48]	; (80005b8 <main+0xec>)
 8000588:	f000 fda4 	bl	80010d4 <HAL_GPIO_WritePin>
		  FND_SEG_NUM8_DISP
 800058c:	2200      	movs	r2, #0
 800058e:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8000592:	4809      	ldr	r0, [pc, #36]	; (80005b8 <main+0xec>)
 8000594:	f000 fd9e 	bl	80010d4 <HAL_GPIO_WritePin>
 8000598:	2200      	movs	r2, #0
 800059a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800059e:	4807      	ldr	r0, [pc, #28]	; (80005bc <main+0xf0>)
 80005a0:	f000 fd98 	bl	80010d4 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 80005a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a8:	f000 faaa 	bl	8000b00 <HAL_Delay>
		  if(HAL_I2C_Master_Transmit(&hi2c1, I2C_Slave_Address, I2C_data, 2, 1000)!= HAL_OK)
 80005ac:	e79d      	b.n	80004ea <main+0x1e>
 80005ae:	bf00      	nop
 80005b0:	20000028 	.word	0x20000028
 80005b4:	40020800 	.word	0x40020800
 80005b8:	40020000 	.word	0x40020000
 80005bc:	40020400 	.word	0x40020400

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	; 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 fb0e 	bl	8003bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	4b28      	ldr	r3, [pc, #160]	; (800068c <SystemClock_Config+0xcc>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	4a27      	ldr	r2, [pc, #156]	; (800068c <SystemClock_Config+0xcc>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	; 0x40
 80005f4:	4b25      	ldr	r3, [pc, #148]	; (800068c <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b22      	ldr	r3, [pc, #136]	; (8000690 <SystemClock_Config+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800060c:	4a20      	ldr	r2, [pc, #128]	; (8000690 <SystemClock_Config+0xd0>)
 800060e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <SystemClock_Config+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000620:	2302      	movs	r3, #2
 8000622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000624:	2301      	movs	r3, #1
 8000626:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000628:	2310      	movs	r3, #16
 800062a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062c:	2302      	movs	r3, #2
 800062e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000630:	2300      	movs	r3, #0
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000634:	2308      	movs	r3, #8
 8000636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000638:	2354      	movs	r3, #84	; 0x54
 800063a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000640:	2304      	movs	r3, #4
 8000642:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	4618      	mov	r0, r3
 800064a:	f002 fe79 	bl	8003340 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000654:	f000 f8e2 	bl	800081c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2302      	movs	r3, #2
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	2102      	movs	r1, #2
 8000674:	4618      	mov	r0, r3
 8000676:	f003 f8db 	bl	8003830 <HAL_RCC_ClockConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000680:	f000 f8cc 	bl	800081c <Error_Handler>
  }
}
 8000684:	bf00      	nop
 8000686:	3750      	adds	r7, #80	; 0x50
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MX_I2C1_Init+0x50>)
 800069a:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <MX_I2C1_Init+0x54>)
 800069c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006a0:	4a12      	ldr	r2, [pc, #72]	; (80006ec <MX_I2C1_Init+0x58>)
 80006a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 136;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006ac:	2288      	movs	r2, #136	; 0x88
 80006ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006d2:	f000 fd19 	bl	8001108 <HAL_I2C_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006dc:	f000 f89e 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000028 	.word	0x20000028
 80006e8:	40005400 	.word	0x40005400
 80006ec:	000186a0 	.word	0x000186a0

080006f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	4b40      	ldr	r3, [pc, #256]	; (800080c <MX_GPIO_Init+0x11c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a3f      	ldr	r2, [pc, #252]	; (800080c <MX_GPIO_Init+0x11c>)
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b3d      	ldr	r3, [pc, #244]	; (800080c <MX_GPIO_Init+0x11c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0304 	and.w	r3, r3, #4
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b39      	ldr	r3, [pc, #228]	; (800080c <MX_GPIO_Init+0x11c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a38      	ldr	r2, [pc, #224]	; (800080c <MX_GPIO_Init+0x11c>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b36      	ldr	r3, [pc, #216]	; (800080c <MX_GPIO_Init+0x11c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	4b32      	ldr	r3, [pc, #200]	; (800080c <MX_GPIO_Init+0x11c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a31      	ldr	r2, [pc, #196]	; (800080c <MX_GPIO_Init+0x11c>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b2f      	ldr	r3, [pc, #188]	; (800080c <MX_GPIO_Init+0x11c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FND_RIGHT_PORT_Pin|FND_LEFT_PORT_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2103      	movs	r1, #3
 800075e:	482c      	ldr	r0, [pc, #176]	; (8000810 <MX_GPIO_Init+0x120>)
 8000760:	f000 fcb8 	bl	80010d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FND_C_PORT_Pin|FND_B_PORT_Pin|FND_A_PORT_Pin|FND_DOT_PORT_Pin, GPIO_PIN_SET);
 8000764:	2201      	movs	r2, #1
 8000766:	f240 510c 	movw	r1, #1292	; 0x50c
 800076a:	482a      	ldr	r0, [pc, #168]	; (8000814 <MX_GPIO_Init+0x124>)
 800076c:	f000 fcb2 	bl	80010d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FND_RIGHT_DOT_PORT_GPIO_Port, FND_RIGHT_DOT_PORT_Pin, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2110      	movs	r1, #16
 8000774:	4827      	ldr	r0, [pc, #156]	; (8000814 <MX_GPIO_Init+0x124>)
 8000776:	f000 fcad 	bl	80010d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FND_LEFT_DOT_PORT_GPIO_Port, FND_LEFT_DOT_PORT_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2101      	movs	r1, #1
 800077e:	4826      	ldr	r0, [pc, #152]	; (8000818 <MX_GPIO_Init+0x128>)
 8000780:	f000 fca8 	bl	80010d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FND_F_PORT_Pin|FND_D_PORT_Pin|FND_G_PORT_Pin|FND_E_PORT_Pin, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800078a:	4823      	ldr	r0, [pc, #140]	; (8000818 <MX_GPIO_Init+0x128>)
 800078c:	f000 fca2 	bl	80010d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000790:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000794:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	4619      	mov	r1, r3
 80007a4:	481a      	ldr	r0, [pc, #104]	; (8000810 <MX_GPIO_Init+0x120>)
 80007a6:	f000 fb11 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : FND_RIGHT_PORT_Pin FND_LEFT_PORT_Pin */
  GPIO_InitStruct.Pin = FND_RIGHT_PORT_Pin|FND_LEFT_PORT_Pin;
 80007aa:	2303      	movs	r3, #3
 80007ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	4619      	mov	r1, r3
 80007c0:	4813      	ldr	r0, [pc, #76]	; (8000810 <MX_GPIO_Init+0x120>)
 80007c2:	f000 fb03 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : FND_C_PORT_Pin FND_B_PORT_Pin FND_RIGHT_DOT_PORT_Pin FND_A_PORT_Pin
                           FND_DOT_PORT_Pin */
  GPIO_InitStruct.Pin = FND_C_PORT_Pin|FND_B_PORT_Pin|FND_RIGHT_DOT_PORT_Pin|FND_A_PORT_Pin
 80007c6:	f240 531c 	movw	r3, #1308	; 0x51c
 80007ca:	60fb      	str	r3, [r7, #12]
                          |FND_DOT_PORT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	4619      	mov	r1, r3
 80007de:	480d      	ldr	r0, [pc, #52]	; (8000814 <MX_GPIO_Init+0x124>)
 80007e0:	f000 faf4 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : FND_LEFT_DOT_PORT_Pin FND_F_PORT_Pin FND_D_PORT_Pin FND_G_PORT_Pin
                           FND_E_PORT_Pin */
  GPIO_InitStruct.Pin = FND_LEFT_DOT_PORT_Pin|FND_F_PORT_Pin|FND_D_PORT_Pin|FND_G_PORT_Pin
 80007e4:	f240 4339 	movw	r3, #1081	; 0x439
 80007e8:	60fb      	str	r3, [r7, #12]
                          |FND_E_PORT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f6:	f107 030c 	add.w	r3, r7, #12
 80007fa:	4619      	mov	r1, r3
 80007fc:	4806      	ldr	r0, [pc, #24]	; (8000818 <MX_GPIO_Init+0x128>)
 80007fe:	f000 fae5 	bl	8000dcc <HAL_GPIO_Init>

}
 8000802:	bf00      	nop
 8000804:	3720      	adds	r7, #32
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800
 8000810:	40020800 	.word	0x40020800
 8000814:	40020000 	.word	0x40020000
 8000818:	40020400 	.word	0x40020400

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000824:	e7fe      	b.n	8000824 <Error_Handler+0x8>
	...

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <HAL_MspInit+0x4c>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000836:	4a0f      	ldr	r2, [pc, #60]	; (8000874 <HAL_MspInit+0x4c>)
 8000838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083c:	6453      	str	r3, [r2, #68]	; 0x44
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <HAL_MspInit+0x4c>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <HAL_MspInit+0x4c>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	4a08      	ldr	r2, [pc, #32]	; (8000874 <HAL_MspInit+0x4c>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000858:	6413      	str	r3, [r2, #64]	; 0x40
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_MspInit+0x4c>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800

08000878 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	; 0x28
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a21      	ldr	r2, [pc, #132]	; (800091c <HAL_I2C_MspInit+0xa4>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d13c      	bne.n	8000914 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	4b20      	ldr	r3, [pc, #128]	; (8000920 <HAL_I2C_MspInit+0xa8>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a1f      	ldr	r2, [pc, #124]	; (8000920 <HAL_I2C_MspInit+0xa8>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <HAL_I2C_MspInit+0xa8>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008bc:	2312      	movs	r3, #18
 80008be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c4:	2303      	movs	r3, #3
 80008c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008c8:	2304      	movs	r3, #4
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4619      	mov	r1, r3
 80008d2:	4814      	ldr	r0, [pc, #80]	; (8000924 <HAL_I2C_MspInit+0xac>)
 80008d4:	f000 fa7a 	bl	8000dcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	4b10      	ldr	r3, [pc, #64]	; (8000920 <HAL_I2C_MspInit+0xa8>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e0:	4a0f      	ldr	r2, [pc, #60]	; (8000920 <HAL_I2C_MspInit+0xa8>)
 80008e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008e6:	6413      	str	r3, [r2, #64]	; 0x40
 80008e8:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <HAL_I2C_MspInit+0xa8>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2100      	movs	r1, #0
 80008f8:	201f      	movs	r0, #31
 80008fa:	f000 fa00 	bl	8000cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80008fe:	201f      	movs	r0, #31
 8000900:	f000 fa19 	bl	8000d36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000904:	2200      	movs	r2, #0
 8000906:	2100      	movs	r1, #0
 8000908:	2020      	movs	r0, #32
 800090a:	f000 f9f8 	bl	8000cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800090e:	2020      	movs	r0, #32
 8000910:	f000 fa11 	bl	8000d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000914:	bf00      	nop
 8000916:	3728      	adds	r7, #40	; 0x28
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40005400 	.word	0x40005400
 8000920:	40023800 	.word	0x40023800
 8000924:	40020400 	.word	0x40020400

08000928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800092c:	e7fe      	b.n	800092c <NMI_Handler+0x4>

0800092e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <HardFault_Handler+0x4>

08000934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <MemManage_Handler+0x4>

0800093a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <BusFault_Handler+0x4>

08000940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <UsageFault_Handler+0x4>

08000946 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000974:	f000 f8a4 	bl	8000ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}

0800097c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000980:	4802      	ldr	r0, [pc, #8]	; (800098c <I2C1_EV_IRQHandler+0x10>)
 8000982:	f000 fe03 	bl	800158c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000028 	.word	0x20000028

08000990 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000994:	4802      	ldr	r0, [pc, #8]	; (80009a0 <I2C1_ER_IRQHandler+0x10>)
 8000996:	f000 ff6a 	bl	800186e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000028 	.word	0x20000028

080009a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <SystemInit+0x20>)
 80009aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ae:	4a05      	ldr	r2, [pc, #20]	; (80009c4 <SystemInit+0x20>)
 80009b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009cc:	480d      	ldr	r0, [pc, #52]	; (8000a04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ce:	490e      	ldr	r1, [pc, #56]	; (8000a08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009d0:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d4:	e002      	b.n	80009dc <LoopCopyDataInit>

080009d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009da:	3304      	adds	r3, #4

080009dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e0:	d3f9      	bcc.n	80009d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e2:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009e4:	4c0b      	ldr	r4, [pc, #44]	; (8000a14 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e8:	e001      	b.n	80009ee <LoopFillZerobss>

080009ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ec:	3204      	adds	r2, #4

080009ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f0:	d3fb      	bcc.n	80009ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009f2:	f7ff ffd7 	bl	80009a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009f6:	f003 f8d7 	bl	8003ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009fa:	f7ff fd67 	bl	80004cc <main>
  bx  lr    
 80009fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a00:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a0c:	08003c40 	.word	0x08003c40
  ldr r2, =_sbss
 8000a10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a14:	20000080 	.word	0x20000080

08000a18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a18:	e7fe      	b.n	8000a18 <ADC_IRQHandler>
	...

08000a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a20:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <HAL_Init+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0d      	ldr	r2, [pc, #52]	; (8000a5c <HAL_Init+0x40>)
 8000a26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <HAL_Init+0x40>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <HAL_Init+0x40>)
 8000a32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <HAL_Init+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <HAL_Init+0x40>)
 8000a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a44:	2003      	movs	r0, #3
 8000a46:	f000 f94f 	bl	8000ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4a:	200f      	movs	r0, #15
 8000a4c:	f000 f808 	bl	8000a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a50:	f7ff feea 	bl	8000828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023c00 	.word	0x40023c00

08000a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <HAL_InitTick+0x54>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_InitTick+0x58>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	4619      	mov	r1, r3
 8000a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 f967 	bl	8000d52 <HAL_SYSTICK_Config>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e00e      	b.n	8000aac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b0f      	cmp	r3, #15
 8000a92:	d80a      	bhi.n	8000aaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a94:	2200      	movs	r2, #0
 8000a96:	6879      	ldr	r1, [r7, #4]
 8000a98:	f04f 30ff 	mov.w	r0, #4294967295
 8000a9c:	f000 f92f 	bl	8000cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa0:	4a06      	ldr	r2, [pc, #24]	; (8000abc <HAL_InitTick+0x5c>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e000      	b.n	8000aac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000000 	.word	0x20000000
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	20000004 	.word	0x20000004

08000ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_IncTick+0x20>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_IncTick+0x24>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4413      	add	r3, r2
 8000ad0:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <HAL_IncTick+0x24>)
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	2000007c 	.word	0x2000007c

08000ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return uwTick;
 8000aec:	4b03      	ldr	r3, [pc, #12]	; (8000afc <HAL_GetTick+0x14>)
 8000aee:	681b      	ldr	r3, [r3, #0]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	2000007c 	.word	0x2000007c

08000b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b08:	f7ff ffee 	bl	8000ae8 <HAL_GetTick>
 8000b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b18:	d005      	beq.n	8000b26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <HAL_Delay+0x44>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	461a      	mov	r2, r3
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	4413      	add	r3, r2
 8000b24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b26:	bf00      	nop
 8000b28:	f7ff ffde 	bl	8000ae8 <HAL_GetTick>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d8f7      	bhi.n	8000b28 <HAL_Delay+0x28>
  {
  }
}
 8000b38:	bf00      	nop
 8000b3a:	bf00      	nop
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000008 	.word	0x20000008

08000b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <__NVIC_SetPriorityGrouping+0x44>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b64:	4013      	ands	r3, r2
 8000b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7a:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <__NVIC_SetPriorityGrouping+0x44>)
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	60d3      	str	r3, [r2, #12]
}
 8000b80:	bf00      	nop
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	0a1b      	lsrs	r3, r3, #8
 8000b9a:	f003 0307 	and.w	r3, r3, #7
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	db0b      	blt.n	8000bd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	f003 021f 	and.w	r2, r3, #31
 8000bc4:	4907      	ldr	r1, [pc, #28]	; (8000be4 <__NVIC_EnableIRQ+0x38>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	095b      	lsrs	r3, r3, #5
 8000bcc:	2001      	movs	r0, #1
 8000bce:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000e100 	.word	0xe000e100

08000be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	db0a      	blt.n	8000c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	490c      	ldr	r1, [pc, #48]	; (8000c34 <__NVIC_SetPriority+0x4c>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	0112      	lsls	r2, r2, #4
 8000c08:	b2d2      	uxtb	r2, r2
 8000c0a:	440b      	add	r3, r1
 8000c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c10:	e00a      	b.n	8000c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4908      	ldr	r1, [pc, #32]	; (8000c38 <__NVIC_SetPriority+0x50>)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	f003 030f 	and.w	r3, r3, #15
 8000c1e:	3b04      	subs	r3, #4
 8000c20:	0112      	lsls	r2, r2, #4
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	440b      	add	r3, r1
 8000c26:	761a      	strb	r2, [r3, #24]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000e100 	.word	0xe000e100
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	; 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	f1c3 0307 	rsb	r3, r3, #7
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	bf28      	it	cs
 8000c5a:	2304      	movcs	r3, #4
 8000c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3304      	adds	r3, #4
 8000c62:	2b06      	cmp	r3, #6
 8000c64:	d902      	bls.n	8000c6c <NVIC_EncodePriority+0x30>
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3b03      	subs	r3, #3
 8000c6a:	e000      	b.n	8000c6e <NVIC_EncodePriority+0x32>
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	f04f 32ff 	mov.w	r2, #4294967295
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	401a      	ands	r2, r3
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c84:	f04f 31ff 	mov.w	r1, #4294967295
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8e:	43d9      	mvns	r1, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	4313      	orrs	r3, r2
         );
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3724      	adds	r7, #36	; 0x24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb4:	d301      	bcc.n	8000cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00f      	b.n	8000cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cba:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <SysTick_Config+0x40>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	f7ff ff8e 	bl	8000be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <SysTick_Config+0x40>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd2:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <SysTick_Config+0x40>)
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	e000e010 	.word	0xe000e010

08000ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff ff29 	bl	8000b48 <__NVIC_SetPriorityGrouping>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b086      	sub	sp, #24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
 8000d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d10:	f7ff ff3e 	bl	8000b90 <__NVIC_GetPriorityGrouping>
 8000d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	68b9      	ldr	r1, [r7, #8]
 8000d1a:	6978      	ldr	r0, [r7, #20]
 8000d1c:	f7ff ff8e 	bl	8000c3c <NVIC_EncodePriority>
 8000d20:	4602      	mov	r2, r0
 8000d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d26:	4611      	mov	r1, r2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff5d 	bl	8000be8 <__NVIC_SetPriority>
}
 8000d2e:	bf00      	nop
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ff31 	bl	8000bac <__NVIC_EnableIRQ>
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff ffa2 	bl	8000ca4 <SysTick_Config>
 8000d60:	4603      	mov	r3, r0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b083      	sub	sp, #12
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d004      	beq.n	8000d88 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2280      	movs	r2, #128	; 0x80
 8000d82:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	e00c      	b.n	8000da2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2205      	movs	r2, #5
 8000d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f022 0201 	bic.w	r2, r2, #1
 8000d9e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dbc:	b2db      	uxtb	r3, r3
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	; 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
 8000de6:	e159      	b.n	800109c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000de8:	2201      	movs	r2, #1
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	f040 8148 	bne.w	8001096 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d005      	beq.n	8000e1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d130      	bne.n	8000e80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	2203      	movs	r2, #3
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4013      	ands	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	68da      	ldr	r2, [r3, #12]
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e54:	2201      	movs	r2, #1
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	091b      	lsrs	r3, r3, #4
 8000e6a:	f003 0201 	and.w	r2, r3, #1
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0303 	and.w	r3, r3, #3
 8000e88:	2b03      	cmp	r3, #3
 8000e8a:	d017      	beq.n	8000ebc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	2203      	movs	r2, #3
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	689a      	ldr	r2, [r3, #8]
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 0303 	and.w	r3, r3, #3
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d123      	bne.n	8000f10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	08da      	lsrs	r2, r3, #3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3208      	adds	r2, #8
 8000ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	f003 0307 	and.w	r3, r3, #7
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	220f      	movs	r2, #15
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	691a      	ldr	r2, [r3, #16]
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	08da      	lsrs	r2, r3, #3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3208      	adds	r2, #8
 8000f0a:	69b9      	ldr	r1, [r7, #24]
 8000f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0203 	and.w	r2, r3, #3
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f000 80a2 	beq.w	8001096 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	4b57      	ldr	r3, [pc, #348]	; (80010b4 <HAL_GPIO_Init+0x2e8>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	4a56      	ldr	r2, [pc, #344]	; (80010b4 <HAL_GPIO_Init+0x2e8>)
 8000f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f60:	6453      	str	r3, [r2, #68]	; 0x44
 8000f62:	4b54      	ldr	r3, [pc, #336]	; (80010b4 <HAL_GPIO_Init+0x2e8>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f6e:	4a52      	ldr	r2, [pc, #328]	; (80010b8 <HAL_GPIO_Init+0x2ec>)
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	089b      	lsrs	r3, r3, #2
 8000f74:	3302      	adds	r3, #2
 8000f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	220f      	movs	r2, #15
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a49      	ldr	r2, [pc, #292]	; (80010bc <HAL_GPIO_Init+0x2f0>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d019      	beq.n	8000fce <HAL_GPIO_Init+0x202>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a48      	ldr	r2, [pc, #288]	; (80010c0 <HAL_GPIO_Init+0x2f4>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d013      	beq.n	8000fca <HAL_GPIO_Init+0x1fe>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a47      	ldr	r2, [pc, #284]	; (80010c4 <HAL_GPIO_Init+0x2f8>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d00d      	beq.n	8000fc6 <HAL_GPIO_Init+0x1fa>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a46      	ldr	r2, [pc, #280]	; (80010c8 <HAL_GPIO_Init+0x2fc>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d007      	beq.n	8000fc2 <HAL_GPIO_Init+0x1f6>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a45      	ldr	r2, [pc, #276]	; (80010cc <HAL_GPIO_Init+0x300>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d101      	bne.n	8000fbe <HAL_GPIO_Init+0x1f2>
 8000fba:	2304      	movs	r3, #4
 8000fbc:	e008      	b.n	8000fd0 <HAL_GPIO_Init+0x204>
 8000fbe:	2307      	movs	r3, #7
 8000fc0:	e006      	b.n	8000fd0 <HAL_GPIO_Init+0x204>
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e004      	b.n	8000fd0 <HAL_GPIO_Init+0x204>
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	e002      	b.n	8000fd0 <HAL_GPIO_Init+0x204>
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e000      	b.n	8000fd0 <HAL_GPIO_Init+0x204>
 8000fce:	2300      	movs	r3, #0
 8000fd0:	69fa      	ldr	r2, [r7, #28]
 8000fd2:	f002 0203 	and.w	r2, r2, #3
 8000fd6:	0092      	lsls	r2, r2, #2
 8000fd8:	4093      	lsls	r3, r2
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fe0:	4935      	ldr	r1, [pc, #212]	; (80010b8 <HAL_GPIO_Init+0x2ec>)
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	089b      	lsrs	r3, r3, #2
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fee:	4b38      	ldr	r3, [pc, #224]	; (80010d0 <HAL_GPIO_Init+0x304>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001012:	4a2f      	ldr	r2, [pc, #188]	; (80010d0 <HAL_GPIO_Init+0x304>)
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001018:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <HAL_GPIO_Init+0x304>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800103c:	4a24      	ldr	r2, [pc, #144]	; (80010d0 <HAL_GPIO_Init+0x304>)
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001042:	4b23      	ldr	r3, [pc, #140]	; (80010d0 <HAL_GPIO_Init+0x304>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	43db      	mvns	r3, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001066:	4a1a      	ldr	r2, [pc, #104]	; (80010d0 <HAL_GPIO_Init+0x304>)
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800106c:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <HAL_GPIO_Init+0x304>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001090:	4a0f      	ldr	r2, [pc, #60]	; (80010d0 <HAL_GPIO_Init+0x304>)
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3301      	adds	r3, #1
 800109a:	61fb      	str	r3, [r7, #28]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	2b0f      	cmp	r3, #15
 80010a0:	f67f aea2 	bls.w	8000de8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	3724      	adds	r7, #36	; 0x24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40013800 	.word	0x40013800
 80010bc:	40020000 	.word	0x40020000
 80010c0:	40020400 	.word	0x40020400
 80010c4:	40020800 	.word	0x40020800
 80010c8:	40020c00 	.word	0x40020c00
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40013c00 	.word	0x40013c00

080010d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	807b      	strh	r3, [r7, #2]
 80010e0:	4613      	mov	r3, r2
 80010e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e4:	787b      	ldrb	r3, [r7, #1]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ea:	887a      	ldrh	r2, [r7, #2]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010f0:	e003      	b.n	80010fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010f2:	887b      	ldrh	r3, [r7, #2]
 80010f4:	041a      	lsls	r2, r3, #16
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	619a      	str	r2, [r3, #24]
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e12b      	b.n	8001372 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	d106      	bne.n	8001134 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff fba2 	bl	8000878 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2224      	movs	r2, #36	; 0x24
 8001138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 0201 	bic.w	r2, r2, #1
 800114a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800115a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800116a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800116c:	f002 fd08 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 8001170:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	4a81      	ldr	r2, [pc, #516]	; (800137c <HAL_I2C_Init+0x274>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d807      	bhi.n	800118c <HAL_I2C_Init+0x84>
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4a80      	ldr	r2, [pc, #512]	; (8001380 <HAL_I2C_Init+0x278>)
 8001180:	4293      	cmp	r3, r2
 8001182:	bf94      	ite	ls
 8001184:	2301      	movls	r3, #1
 8001186:	2300      	movhi	r3, #0
 8001188:	b2db      	uxtb	r3, r3
 800118a:	e006      	b.n	800119a <HAL_I2C_Init+0x92>
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4a7d      	ldr	r2, [pc, #500]	; (8001384 <HAL_I2C_Init+0x27c>)
 8001190:	4293      	cmp	r3, r2
 8001192:	bf94      	ite	ls
 8001194:	2301      	movls	r3, #1
 8001196:	2300      	movhi	r3, #0
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e0e7      	b.n	8001372 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4a78      	ldr	r2, [pc, #480]	; (8001388 <HAL_I2C_Init+0x280>)
 80011a6:	fba2 2303 	umull	r2, r3, r2, r3
 80011aa:	0c9b      	lsrs	r3, r3, #18
 80011ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	68ba      	ldr	r2, [r7, #8]
 80011be:	430a      	orrs	r2, r1
 80011c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	4a6a      	ldr	r2, [pc, #424]	; (800137c <HAL_I2C_Init+0x274>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d802      	bhi.n	80011dc <HAL_I2C_Init+0xd4>
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	3301      	adds	r3, #1
 80011da:	e009      	b.n	80011f0 <HAL_I2C_Init+0xe8>
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011e2:	fb02 f303 	mul.w	r3, r2, r3
 80011e6:	4a69      	ldr	r2, [pc, #420]	; (800138c <HAL_I2C_Init+0x284>)
 80011e8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ec:	099b      	lsrs	r3, r3, #6
 80011ee:	3301      	adds	r3, #1
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	6812      	ldr	r2, [r2, #0]
 80011f4:	430b      	orrs	r3, r1
 80011f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001202:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	495c      	ldr	r1, [pc, #368]	; (800137c <HAL_I2C_Init+0x274>)
 800120c:	428b      	cmp	r3, r1
 800120e:	d819      	bhi.n	8001244 <HAL_I2C_Init+0x13c>
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	1e59      	subs	r1, r3, #1
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	fbb1 f3f3 	udiv	r3, r1, r3
 800121e:	1c59      	adds	r1, r3, #1
 8001220:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001224:	400b      	ands	r3, r1
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00a      	beq.n	8001240 <HAL_I2C_Init+0x138>
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	1e59      	subs	r1, r3, #1
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	fbb1 f3f3 	udiv	r3, r1, r3
 8001238:	3301      	adds	r3, #1
 800123a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800123e:	e051      	b.n	80012e4 <HAL_I2C_Init+0x1dc>
 8001240:	2304      	movs	r3, #4
 8001242:	e04f      	b.n	80012e4 <HAL_I2C_Init+0x1dc>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d111      	bne.n	8001270 <HAL_I2C_Init+0x168>
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	1e58      	subs	r0, r3, #1
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6859      	ldr	r1, [r3, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	440b      	add	r3, r1
 800125a:	fbb0 f3f3 	udiv	r3, r0, r3
 800125e:	3301      	adds	r3, #1
 8001260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001264:	2b00      	cmp	r3, #0
 8001266:	bf0c      	ite	eq
 8001268:	2301      	moveq	r3, #1
 800126a:	2300      	movne	r3, #0
 800126c:	b2db      	uxtb	r3, r3
 800126e:	e012      	b.n	8001296 <HAL_I2C_Init+0x18e>
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	1e58      	subs	r0, r3, #1
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6859      	ldr	r1, [r3, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	440b      	add	r3, r1
 800127e:	0099      	lsls	r1, r3, #2
 8001280:	440b      	add	r3, r1
 8001282:	fbb0 f3f3 	udiv	r3, r0, r3
 8001286:	3301      	adds	r3, #1
 8001288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800128c:	2b00      	cmp	r3, #0
 800128e:	bf0c      	ite	eq
 8001290:	2301      	moveq	r3, #1
 8001292:	2300      	movne	r3, #0
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_I2C_Init+0x196>
 800129a:	2301      	movs	r3, #1
 800129c:	e022      	b.n	80012e4 <HAL_I2C_Init+0x1dc>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10e      	bne.n	80012c4 <HAL_I2C_Init+0x1bc>
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	1e58      	subs	r0, r3, #1
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6859      	ldr	r1, [r3, #4]
 80012ae:	460b      	mov	r3, r1
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	440b      	add	r3, r1
 80012b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80012b8:	3301      	adds	r3, #1
 80012ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012c2:	e00f      	b.n	80012e4 <HAL_I2C_Init+0x1dc>
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	1e58      	subs	r0, r3, #1
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6859      	ldr	r1, [r3, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	440b      	add	r3, r1
 80012d2:	0099      	lsls	r1, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80012da:	3301      	adds	r3, #1
 80012dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	6809      	ldr	r1, [r1, #0]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69da      	ldr	r2, [r3, #28]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a1b      	ldr	r3, [r3, #32]
 80012fe:	431a      	orrs	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	430a      	orrs	r2, r1
 8001306:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001312:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	6911      	ldr	r1, [r2, #16]
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	68d2      	ldr	r2, [r2, #12]
 800131e:	4311      	orrs	r1, r2
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	6812      	ldr	r2, [r2, #0]
 8001324:	430b      	orrs	r3, r1
 8001326:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	695a      	ldr	r2, [r3, #20]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	430a      	orrs	r2, r1
 8001342:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0201 	orr.w	r2, r2, #1
 8001352:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2220      	movs	r2, #32
 800135e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	000186a0 	.word	0x000186a0
 8001380:	001e847f 	.word	0x001e847f
 8001384:	003d08ff 	.word	0x003d08ff
 8001388:	431bde83 	.word	0x431bde83
 800138c:	10624dd3 	.word	0x10624dd3

08001390 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af02      	add	r7, sp, #8
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	607a      	str	r2, [r7, #4]
 800139a:	461a      	mov	r2, r3
 800139c:	460b      	mov	r3, r1
 800139e:	817b      	strh	r3, [r7, #10]
 80013a0:	4613      	mov	r3, r2
 80013a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013a4:	f7ff fba0 	bl	8000ae8 <HAL_GetTick>
 80013a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b20      	cmp	r3, #32
 80013b4:	f040 80e0 	bne.w	8001578 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	2319      	movs	r3, #25
 80013be:	2201      	movs	r2, #1
 80013c0:	4970      	ldr	r1, [pc, #448]	; (8001584 <HAL_I2C_Master_Transmit+0x1f4>)
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	f001 fde8 	bl	8002f98 <I2C_WaitOnFlagUntilTimeout>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80013ce:	2302      	movs	r3, #2
 80013d0:	e0d3      	b.n	800157a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d101      	bne.n	80013e0 <HAL_I2C_Master_Transmit+0x50>
 80013dc:	2302      	movs	r3, #2
 80013de:	e0cc      	b.n	800157a <HAL_I2C_Master_Transmit+0x1ea>
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2201      	movs	r2, #1
 80013e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d007      	beq.n	8001406 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f042 0201 	orr.w	r2, r2, #1
 8001404:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001414:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2221      	movs	r2, #33	; 0x21
 800141a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2210      	movs	r2, #16
 8001422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2200      	movs	r2, #0
 800142a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	893a      	ldrh	r2, [r7, #8]
 8001436:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800143c:	b29a      	uxth	r2, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4a50      	ldr	r2, [pc, #320]	; (8001588 <HAL_I2C_Master_Transmit+0x1f8>)
 8001446:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001448:	8979      	ldrh	r1, [r7, #10]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	6a3a      	ldr	r2, [r7, #32]
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f001 fc78 	bl	8002d44 <I2C_MasterRequestWrite>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e08d      	b.n	800157a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001474:	e066      	b.n	8001544 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	6a39      	ldr	r1, [r7, #32]
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f001 fe62 	bl	8003144 <I2C_WaitOnTXEFlagUntilTimeout>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00d      	beq.n	80014a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	2b04      	cmp	r3, #4
 800148c:	d107      	bne.n	800149e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800149c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e06b      	b.n	800157a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a6:	781a      	ldrb	r2, [r3, #0]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014bc:	b29b      	uxth	r3, r3
 80014be:	3b01      	subs	r3, #1
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ca:	3b01      	subs	r3, #1
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	695b      	ldr	r3, [r3, #20]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	2b04      	cmp	r3, #4
 80014de:	d11b      	bne.n	8001518 <HAL_I2C_Master_Transmit+0x188>
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d017      	beq.n	8001518 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ec:	781a      	ldrb	r2, [r3, #0]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f8:	1c5a      	adds	r2, r3, #1
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001502:	b29b      	uxth	r3, r3
 8001504:	3b01      	subs	r3, #1
 8001506:	b29a      	uxth	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001510:	3b01      	subs	r3, #1
 8001512:	b29a      	uxth	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	6a39      	ldr	r1, [r7, #32]
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	f001 fe52 	bl	80031c6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00d      	beq.n	8001544 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	2b04      	cmp	r3, #4
 800152e:	d107      	bne.n	8001540 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800153e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e01a      	b.n	800157a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001548:	2b00      	cmp	r3, #0
 800154a:	d194      	bne.n	8001476 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800155a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2220      	movs	r2, #32
 8001560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	e000      	b.n	800157a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001578:	2302      	movs	r3, #2
  }
}
 800157a:	4618      	mov	r0, r3
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	00100002 	.word	0x00100002
 8001588:	ffff0000 	.word	0xffff0000

0800158c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001594:	2300      	movs	r3, #0
 8001596:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80015ac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015b4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	2b10      	cmp	r3, #16
 80015ba:	d003      	beq.n	80015c4 <HAL_I2C_EV_IRQHandler+0x38>
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	2b40      	cmp	r3, #64	; 0x40
 80015c0:	f040 80c1 	bne.w	8001746 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10d      	bne.n	80015fa <HAL_I2C_EV_IRQHandler+0x6e>
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80015e4:	d003      	beq.n	80015ee <HAL_I2C_EV_IRQHandler+0x62>
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80015ec:	d101      	bne.n	80015f2 <HAL_I2C_EV_IRQHandler+0x66>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <HAL_I2C_EV_IRQHandler+0x68>
 80015f2:	2300      	movs	r3, #0
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	f000 8132 	beq.w	800185e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b00      	cmp	r3, #0
 8001602:	d00c      	beq.n	800161e <HAL_I2C_EV_IRQHandler+0x92>
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	0a5b      	lsrs	r3, r3, #9
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	2b00      	cmp	r3, #0
 800160e:	d006      	beq.n	800161e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f001 fe7a 	bl	800330a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 fd79 	bl	800210e <I2C_Master_SB>
 800161c:	e092      	b.n	8001744 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	08db      	lsrs	r3, r3, #3
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d009      	beq.n	800163e <HAL_I2C_EV_IRQHandler+0xb2>
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	0a5b      	lsrs	r3, r3, #9
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 fdef 	bl	800221a <I2C_Master_ADD10>
 800163c:	e082      	b.n	8001744 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	085b      	lsrs	r3, r3, #1
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d009      	beq.n	800165e <HAL_I2C_EV_IRQHandler+0xd2>
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	0a5b      	lsrs	r3, r3, #9
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 fe09 	bl	800226e <I2C_Master_ADDR>
 800165c:	e072      	b.n	8001744 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	089b      	lsrs	r3, r3, #2
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d03b      	beq.n	80016e2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001678:	f000 80f3 	beq.w	8001862 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	09db      	lsrs	r3, r3, #7
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	2b00      	cmp	r3, #0
 8001686:	d00f      	beq.n	80016a8 <HAL_I2C_EV_IRQHandler+0x11c>
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	0a9b      	lsrs	r3, r3, #10
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d009      	beq.n	80016a8 <HAL_I2C_EV_IRQHandler+0x11c>
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	089b      	lsrs	r3, r3, #2
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b00      	cmp	r3, #0
 800169e:	d103      	bne.n	80016a8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 f9f3 	bl	8001a8c <I2C_MasterTransmit_TXE>
 80016a6:	e04d      	b.n	8001744 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	089b      	lsrs	r3, r3, #2
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 80d6 	beq.w	8001862 <HAL_I2C_EV_IRQHandler+0x2d6>
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	0a5b      	lsrs	r3, r3, #9
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 80cf 	beq.w	8001862 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80016c4:	7bbb      	ldrb	r3, [r7, #14]
 80016c6:	2b21      	cmp	r3, #33	; 0x21
 80016c8:	d103      	bne.n	80016d2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 fa7a 	bl	8001bc4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016d0:	e0c7      	b.n	8001862 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	2b40      	cmp	r3, #64	; 0x40
 80016d6:	f040 80c4 	bne.w	8001862 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 fae8 	bl	8001cb0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016e0:	e0bf      	b.n	8001862 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016f0:	f000 80b7 	beq.w	8001862 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	099b      	lsrs	r3, r3, #6
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00f      	beq.n	8001720 <HAL_I2C_EV_IRQHandler+0x194>
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	0a9b      	lsrs	r3, r3, #10
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	2b00      	cmp	r3, #0
 800170a:	d009      	beq.n	8001720 <HAL_I2C_EV_IRQHandler+0x194>
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	089b      	lsrs	r3, r3, #2
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b00      	cmp	r3, #0
 8001716:	d103      	bne.n	8001720 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 fb5d 	bl	8001dd8 <I2C_MasterReceive_RXNE>
 800171e:	e011      	b.n	8001744 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	089b      	lsrs	r3, r3, #2
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 809a 	beq.w	8001862 <HAL_I2C_EV_IRQHandler+0x2d6>
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	0a5b      	lsrs	r3, r3, #9
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 8093 	beq.w	8001862 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 fbfc 	bl	8001f3a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001742:	e08e      	b.n	8001862 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001744:	e08d      	b.n	8001862 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	2b00      	cmp	r3, #0
 800174c:	d004      	beq.n	8001758 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	61fb      	str	r3, [r7, #28]
 8001756:	e007      	b.n	8001768 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	085b      	lsrs	r3, r3, #1
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	2b00      	cmp	r3, #0
 8001772:	d012      	beq.n	800179a <HAL_I2C_EV_IRQHandler+0x20e>
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	0a5b      	lsrs	r3, r3, #9
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00c      	beq.n	800179a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001790:	69b9      	ldr	r1, [r7, #24]
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 ffba 	bl	800270c <I2C_Slave_ADDR>
 8001798:	e066      	b.n	8001868 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	091b      	lsrs	r3, r3, #4
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d009      	beq.n	80017ba <HAL_I2C_EV_IRQHandler+0x22e>
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	0a5b      	lsrs	r3, r3, #9
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 fff4 	bl	80027a0 <I2C_Slave_STOPF>
 80017b8:	e056      	b.n	8001868 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80017ba:	7bbb      	ldrb	r3, [r7, #14]
 80017bc:	2b21      	cmp	r3, #33	; 0x21
 80017be:	d002      	beq.n	80017c6 <HAL_I2C_EV_IRQHandler+0x23a>
 80017c0:	7bbb      	ldrb	r3, [r7, #14]
 80017c2:	2b29      	cmp	r3, #41	; 0x29
 80017c4:	d125      	bne.n	8001812 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	09db      	lsrs	r3, r3, #7
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00f      	beq.n	80017f2 <HAL_I2C_EV_IRQHandler+0x266>
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	0a9b      	lsrs	r3, r3, #10
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d009      	beq.n	80017f2 <HAL_I2C_EV_IRQHandler+0x266>
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	089b      	lsrs	r3, r3, #2
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d103      	bne.n	80017f2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 fed0 	bl	8002590 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017f0:	e039      	b.n	8001866 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	089b      	lsrs	r3, r3, #2
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d033      	beq.n	8001866 <HAL_I2C_EV_IRQHandler+0x2da>
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	0a5b      	lsrs	r3, r3, #9
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d02d      	beq.n	8001866 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 fefd 	bl	800260a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001810:	e029      	b.n	8001866 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	099b      	lsrs	r3, r3, #6
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00f      	beq.n	800183e <HAL_I2C_EV_IRQHandler+0x2b2>
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	0a9b      	lsrs	r3, r3, #10
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d009      	beq.n	800183e <HAL_I2C_EV_IRQHandler+0x2b2>
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	089b      	lsrs	r3, r3, #2
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	d103      	bne.n	800183e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 ff08 	bl	800264c <I2C_SlaveReceive_RXNE>
 800183c:	e014      	b.n	8001868 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	089b      	lsrs	r3, r3, #2
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00e      	beq.n	8001868 <HAL_I2C_EV_IRQHandler+0x2dc>
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	0a5b      	lsrs	r3, r3, #9
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d008      	beq.n	8001868 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 ff36 	bl	80026c8 <I2C_SlaveReceive_BTF>
 800185c:	e004      	b.n	8001868 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800185e:	bf00      	nop
 8001860:	e002      	b.n	8001868 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001862:	bf00      	nop
 8001864:	e000      	b.n	8001868 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001866:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001868:	3720      	adds	r7, #32
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b08a      	sub	sp, #40	; 0x28
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001886:	2300      	movs	r3, #0
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001890:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001892:	6a3b      	ldr	r3, [r7, #32]
 8001894:	0a1b      	lsrs	r3, r3, #8
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00e      	beq.n	80018bc <HAL_I2C_ER_IRQHandler+0x4e>
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d008      	beq.n	80018bc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80018ba:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80018bc:	6a3b      	ldr	r3, [r7, #32]
 80018be:	0a5b      	lsrs	r3, r3, #9
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00e      	beq.n	80018e6 <HAL_I2C_ER_IRQHandler+0x78>
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	0a1b      	lsrs	r3, r3, #8
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d008      	beq.n	80018e6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	f043 0302 	orr.w	r3, r3, #2
 80018da:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80018e4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80018e6:	6a3b      	ldr	r3, [r7, #32]
 80018e8:	0a9b      	lsrs	r3, r3, #10
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d03f      	beq.n	8001972 <HAL_I2C_ER_IRQHandler+0x104>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	0a1b      	lsrs	r3, r3, #8
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d039      	beq.n	8001972 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80018fe:	7efb      	ldrb	r3, [r7, #27]
 8001900:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001906:	b29b      	uxth	r3, r3
 8001908:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001910:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001918:	7ebb      	ldrb	r3, [r7, #26]
 800191a:	2b20      	cmp	r3, #32
 800191c:	d112      	bne.n	8001944 <HAL_I2C_ER_IRQHandler+0xd6>
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d10f      	bne.n	8001944 <HAL_I2C_ER_IRQHandler+0xd6>
 8001924:	7cfb      	ldrb	r3, [r7, #19]
 8001926:	2b21      	cmp	r3, #33	; 0x21
 8001928:	d008      	beq.n	800193c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800192a:	7cfb      	ldrb	r3, [r7, #19]
 800192c:	2b29      	cmp	r3, #41	; 0x29
 800192e:	d005      	beq.n	800193c <HAL_I2C_ER_IRQHandler+0xce>
 8001930:	7cfb      	ldrb	r3, [r7, #19]
 8001932:	2b28      	cmp	r3, #40	; 0x28
 8001934:	d106      	bne.n	8001944 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2b21      	cmp	r3, #33	; 0x21
 800193a:	d103      	bne.n	8001944 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f001 f85f 	bl	8002a00 <I2C_Slave_AF>
 8001942:	e016      	b.n	8001972 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800194c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001956:	7efb      	ldrb	r3, [r7, #27]
 8001958:	2b10      	cmp	r3, #16
 800195a:	d002      	beq.n	8001962 <HAL_I2C_ER_IRQHandler+0xf4>
 800195c:	7efb      	ldrb	r3, [r7, #27]
 800195e:	2b40      	cmp	r3, #64	; 0x40
 8001960:	d107      	bne.n	8001972 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001970:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	0adb      	lsrs	r3, r3, #11
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00e      	beq.n	800199c <HAL_I2C_ER_IRQHandler+0x12e>
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	0a1b      	lsrs	r3, r3, #8
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d008      	beq.n	800199c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	f043 0308 	orr.w	r3, r3, #8
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800199a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d008      	beq.n	80019b4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	431a      	orrs	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f001 f896 	bl	8002ae0 <I2C_ITError>
  }
}
 80019b4:	bf00      	nop
 80019b6:	3728      	adds	r7, #40	; 0x28
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	70fb      	strb	r3, [r7, #3]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a9a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001aa2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d150      	bne.n	8001b54 <I2C_MasterTransmit_TXE+0xc8>
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	2b21      	cmp	r3, #33	; 0x21
 8001ab6:	d14d      	bne.n	8001b54 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	2b08      	cmp	r3, #8
 8001abc:	d01d      	beq.n	8001afa <I2C_MasterTransmit_TXE+0x6e>
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	2b20      	cmp	r3, #32
 8001ac2:	d01a      	beq.n	8001afa <I2C_MasterTransmit_TXE+0x6e>
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001aca:	d016      	beq.n	8001afa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ada:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2211      	movs	r2, #17
 8001ae0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2220      	movs	r2, #32
 8001aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ff62 	bl	80019bc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001af8:	e060      	b.n	8001bbc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b08:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b18:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2220      	movs	r2, #32
 8001b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b40      	cmp	r3, #64	; 0x40
 8001b32:	d107      	bne.n	8001b44 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff ff7d 	bl	8001a3c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b42:	e03b      	b.n	8001bbc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff ff35 	bl	80019bc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b52:	e033      	b.n	8001bbc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	2b21      	cmp	r3, #33	; 0x21
 8001b58:	d005      	beq.n	8001b66 <I2C_MasterTransmit_TXE+0xda>
 8001b5a:	7bbb      	ldrb	r3, [r7, #14]
 8001b5c:	2b40      	cmp	r3, #64	; 0x40
 8001b5e:	d12d      	bne.n	8001bbc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	2b22      	cmp	r3, #34	; 0x22
 8001b64:	d12a      	bne.n	8001bbc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d108      	bne.n	8001b82 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b7e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001b80:	e01c      	b.n	8001bbc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b40      	cmp	r3, #64	; 0x40
 8001b8c:	d103      	bne.n	8001b96 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f88e 	bl	8001cb0 <I2C_MemoryTransmit_TXE_BTF>
}
 8001b94:	e012      	b.n	8001bbc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9a:	781a      	ldrb	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001bba:	e7ff      	b.n	8001bbc <I2C_MasterTransmit_TXE+0x130>
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b21      	cmp	r3, #33	; 0x21
 8001bdc:	d164      	bne.n	8001ca8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d012      	beq.n	8001c0e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bec:	781a      	ldrb	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	1c5a      	adds	r2, r3, #1
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	3b01      	subs	r3, #1
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001c0c:	e04c      	b.n	8001ca8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d01d      	beq.n	8001c50 <I2C_MasterTransmit_BTF+0x8c>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2b20      	cmp	r3, #32
 8001c18:	d01a      	beq.n	8001c50 <I2C_MasterTransmit_BTF+0x8c>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c20:	d016      	beq.n	8001c50 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c30:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2211      	movs	r2, #17
 8001c36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2220      	movs	r2, #32
 8001c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff feb7 	bl	80019bc <HAL_I2C_MasterTxCpltCallback>
}
 8001c4e:	e02b      	b.n	8001ca8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c5e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c6e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2220      	movs	r2, #32
 8001c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b40      	cmp	r3, #64	; 0x40
 8001c88:	d107      	bne.n	8001c9a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff fed2 	bl	8001a3c <HAL_I2C_MemTxCpltCallback>
}
 8001c98:	e006      	b.n	8001ca8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff fe8a 	bl	80019bc <HAL_I2C_MasterTxCpltCallback>
}
 8001ca8:	bf00      	nop
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cbe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d11d      	bne.n	8001d04 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d10b      	bne.n	8001ce8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ce0:	1c9a      	adds	r2, r3, #2
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001ce6:	e073      	b.n	8001dd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	121b      	asrs	r3, r3, #8
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cfc:	1c5a      	adds	r2, r3, #1
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001d02:	e065      	b.n	8001dd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d10b      	bne.n	8001d24 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d1c:	1c5a      	adds	r2, r3, #1
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001d22:	e055      	b.n	8001dd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d151      	bne.n	8001dd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
 8001d2e:	2b22      	cmp	r3, #34	; 0x22
 8001d30:	d10d      	bne.n	8001d4e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d40:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001d4c:	e040      	b.n	8001dd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d015      	beq.n	8001d84 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	2b21      	cmp	r3, #33	; 0x21
 8001d5c:	d112      	bne.n	8001d84 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	781a      	ldrb	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001d82:	e025      	b.n	8001dd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d120      	bne.n	8001dd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	2b21      	cmp	r3, #33	; 0x21
 8001d92:	d11d      	bne.n	8001dd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001da2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001db2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff fe36 	bl	8001a3c <HAL_I2C_MemTxCpltCallback>
}
 8001dd0:	bf00      	nop
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b22      	cmp	r3, #34	; 0x22
 8001dea:	f040 80a2 	bne.w	8001f32 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	d921      	bls.n	8001e40 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691a      	ldr	r2, [r3, #16]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	2b03      	cmp	r3, #3
 8001e2a:	f040 8082 	bne.w	8001f32 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e3c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8001e3e:	e078      	b.n	8001f32 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d074      	beq.n	8001f32 <I2C_MasterReceive_RXNE+0x15a>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d002      	beq.n	8001e54 <I2C_MasterReceive_RXNE+0x7c>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d16e      	bne.n	8001f32 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f001 f9f7 	bl	8003248 <I2C_WaitOnSTOPRequestThroughIT>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d142      	bne.n	8001ee6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e6e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e7e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691a      	ldr	r2, [r3, #16]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	1c5a      	adds	r2, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b40      	cmp	r3, #64	; 0x40
 8001eb8:	d10a      	bne.n	8001ed0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff fdc1 	bl	8001a50 <HAL_I2C_MemRxCpltCallback>
}
 8001ece:	e030      	b.n	8001f32 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2212      	movs	r2, #18
 8001edc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff fd76 	bl	80019d0 <HAL_I2C_MasterRxCpltCallback>
}
 8001ee4:	e025      	b.n	8001f32 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ef4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	691a      	ldr	r2, [r3, #16]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	3b01      	subs	r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2220      	movs	r2, #32
 8001f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff fd99 	bl	8001a64 <HAL_I2C_ErrorCallback>
}
 8001f32:	bf00      	nop
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f46:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d11b      	bne.n	8001f8a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f60:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	1c5a      	adds	r2, r3, #1
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001f88:	e0bd      	b.n	8002106 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	2b03      	cmp	r3, #3
 8001f92:	d129      	bne.n	8001fe8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fa2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d00a      	beq.n	8001fc0 <I2C_MasterReceive_BTF+0x86>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d007      	beq.n	8001fc0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fbe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	691a      	ldr	r2, [r3, #16]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	1c5a      	adds	r2, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001fe6:	e08e      	b.n	8002106 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d176      	bne.n	80020e0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d002      	beq.n	8001ffe <I2C_MasterReceive_BTF+0xc4>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2b10      	cmp	r3, #16
 8001ffc:	d108      	bne.n	8002010 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	e019      	b.n	8002044 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2b04      	cmp	r3, #4
 8002014:	d002      	beq.n	800201c <I2C_MasterReceive_BTF+0xe2>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d108      	bne.n	800202e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	e00a      	b.n	8002044 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2b10      	cmp	r3, #16
 8002032:	d007      	beq.n	8002044 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002042:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	691a      	ldr	r2, [r3, #16]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002060:	b29b      	uxth	r3, r3
 8002062:	3b01      	subs	r3, #1
 8002064:	b29a      	uxth	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	691a      	ldr	r2, [r3, #16]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	1c5a      	adds	r2, r3, #1
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002086:	b29b      	uxth	r3, r3
 8002088:	3b01      	subs	r3, #1
 800208a:	b29a      	uxth	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800209e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2220      	movs	r2, #32
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b40      	cmp	r3, #64	; 0x40
 80020b2:	d10a      	bne.n	80020ca <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff fcc4 	bl	8001a50 <HAL_I2C_MemRxCpltCallback>
}
 80020c8:	e01d      	b.n	8002106 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2212      	movs	r2, #18
 80020d6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff fc79 	bl	80019d0 <HAL_I2C_MasterRxCpltCallback>
}
 80020de:	e012      	b.n	8002106 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691a      	ldr	r2, [r3, #16]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	1c5a      	adds	r2, r3, #1
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	3b01      	subs	r3, #1
 8002100:	b29a      	uxth	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b40      	cmp	r3, #64	; 0x40
 8002120:	d117      	bne.n	8002152 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	b2db      	uxtb	r3, r3
 8002130:	461a      	mov	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800213a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800213c:	e067      	b.n	800220e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	b2db      	uxtb	r3, r3
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	b2da      	uxtb	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	611a      	str	r2, [r3, #16]
}
 8002150:	e05d      	b.n	800220e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800215a:	d133      	bne.n	80021c4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b21      	cmp	r3, #33	; 0x21
 8002166:	d109      	bne.n	800217c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216c:	b2db      	uxtb	r3, r3
 800216e:	461a      	mov	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002178:	611a      	str	r2, [r3, #16]
 800217a:	e008      	b.n	800218e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002180:	b2db      	uxtb	r3, r3
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	b2da      	uxtb	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002192:	2b00      	cmp	r3, #0
 8002194:	d004      	beq.n	80021a0 <I2C_Master_SB+0x92>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800219a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219c:	2b00      	cmp	r3, #0
 800219e:	d108      	bne.n	80021b2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d032      	beq.n	800220e <I2C_Master_SB+0x100>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d02d      	beq.n	800220e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021c0:	605a      	str	r2, [r3, #4]
}
 80021c2:	e024      	b.n	800220e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10e      	bne.n	80021ea <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	11db      	asrs	r3, r3, #7
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	f003 0306 	and.w	r3, r3, #6
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	f063 030f 	orn	r3, r3, #15
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	611a      	str	r2, [r3, #16]
}
 80021e8:	e011      	b.n	800220e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d10d      	bne.n	800220e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	11db      	asrs	r3, r3, #7
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	f003 0306 	and.w	r3, r3, #6
 8002200:	b2db      	uxtb	r3, r3
 8002202:	f063 030e 	orn	r3, r3, #14
 8002206:	b2da      	uxtb	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	611a      	str	r2, [r3, #16]
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	b2da      	uxtb	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002232:	2b00      	cmp	r3, #0
 8002234:	d004      	beq.n	8002240 <I2C_Master_ADD10+0x26>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223c:	2b00      	cmp	r3, #0
 800223e:	d108      	bne.n	8002252 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00c      	beq.n	8002262 <I2C_Master_ADD10+0x48>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224e:	2b00      	cmp	r3, #0
 8002250:	d007      	beq.n	8002262 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002260:	605a      	str	r2, [r3, #4]
  }
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800226e:	b480      	push	{r7}
 8002270:	b091      	sub	sp, #68	; 0x44
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800227c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002284:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b22      	cmp	r3, #34	; 0x22
 8002296:	f040 8169 	bne.w	800256c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10f      	bne.n	80022c2 <I2C_Master_ADDR+0x54>
 80022a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80022a6:	2b40      	cmp	r3, #64	; 0x40
 80022a8:	d10b      	bne.n	80022c2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022aa:	2300      	movs	r3, #0
 80022ac:	633b      	str	r3, [r7, #48]	; 0x30
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	633b      	str	r3, [r7, #48]	; 0x30
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	633b      	str	r3, [r7, #48]	; 0x30
 80022be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c0:	e160      	b.n	8002584 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d11d      	bne.n	8002306 <I2C_Master_ADDR+0x98>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80022d2:	d118      	bne.n	8002306 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022d4:	2300      	movs	r3, #0
 80022d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022f8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	651a      	str	r2, [r3, #80]	; 0x50
 8002304:	e13e      	b.n	8002584 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230a:	b29b      	uxth	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d113      	bne.n	8002338 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002310:	2300      	movs	r3, #0
 8002312:	62bb      	str	r3, [r7, #40]	; 0x28
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	62bb      	str	r3, [r7, #40]	; 0x28
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	62bb      	str	r3, [r7, #40]	; 0x28
 8002324:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	e115      	b.n	8002564 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233c:	b29b      	uxth	r3, r3
 800233e:	2b01      	cmp	r3, #1
 8002340:	f040 808a 	bne.w	8002458 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002346:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800234a:	d137      	bne.n	80023bc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800235a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800236a:	d113      	bne.n	8002394 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800237a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800237c:	2300      	movs	r3, #0
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	e0e7      	b.n	8002564 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002394:	2300      	movs	r3, #0
 8002396:	623b      	str	r3, [r7, #32]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	623b      	str	r3, [r7, #32]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	623b      	str	r3, [r7, #32]
 80023a8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	e0d3      	b.n	8002564 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80023bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d02e      	beq.n	8002420 <I2C_Master_ADDR+0x1b2>
 80023c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c4:	2b20      	cmp	r3, #32
 80023c6:	d02b      	beq.n	8002420 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80023c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ca:	2b12      	cmp	r3, #18
 80023cc:	d102      	bne.n	80023d4 <I2C_Master_ADDR+0x166>
 80023ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d125      	bne.n	8002420 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80023d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d00e      	beq.n	80023f8 <I2C_Master_ADDR+0x18a>
 80023da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d00b      	beq.n	80023f8 <I2C_Master_ADDR+0x18a>
 80023e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e2:	2b10      	cmp	r3, #16
 80023e4:	d008      	beq.n	80023f8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	e007      	b.n	8002408 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002406:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002408:	2300      	movs	r3, #0
 800240a:	61fb      	str	r3, [r7, #28]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	61fb      	str	r3, [r7, #28]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	61fb      	str	r3, [r7, #28]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	e0a1      	b.n	8002564 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800242e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002430:	2300      	movs	r3, #0
 8002432:	61bb      	str	r3, [r7, #24]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	61bb      	str	r3, [r7, #24]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	61bb      	str	r3, [r7, #24]
 8002444:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	e085      	b.n	8002564 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245c:	b29b      	uxth	r3, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d14d      	bne.n	80024fe <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002464:	2b04      	cmp	r3, #4
 8002466:	d016      	beq.n	8002496 <I2C_Master_ADDR+0x228>
 8002468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800246a:	2b02      	cmp	r3, #2
 800246c:	d013      	beq.n	8002496 <I2C_Master_ADDR+0x228>
 800246e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002470:	2b10      	cmp	r3, #16
 8002472:	d010      	beq.n	8002496 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002482:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	e007      	b.n	80024a6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024a4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024b4:	d117      	bne.n	80024e6 <I2C_Master_ADDR+0x278>
 80024b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024bc:	d00b      	beq.n	80024d6 <I2C_Master_ADDR+0x268>
 80024be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d008      	beq.n	80024d6 <I2C_Master_ADDR+0x268>
 80024c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d005      	beq.n	80024d6 <I2C_Master_ADDR+0x268>
 80024ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024cc:	2b10      	cmp	r3, #16
 80024ce:	d002      	beq.n	80024d6 <I2C_Master_ADDR+0x268>
 80024d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d2:	2b20      	cmp	r3, #32
 80024d4:	d107      	bne.n	80024e6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024e4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	e032      	b.n	8002564 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800250c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002518:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800251c:	d117      	bne.n	800254e <I2C_Master_ADDR+0x2e0>
 800251e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002520:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002524:	d00b      	beq.n	800253e <I2C_Master_ADDR+0x2d0>
 8002526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002528:	2b01      	cmp	r3, #1
 800252a:	d008      	beq.n	800253e <I2C_Master_ADDR+0x2d0>
 800252c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800252e:	2b08      	cmp	r3, #8
 8002530:	d005      	beq.n	800253e <I2C_Master_ADDR+0x2d0>
 8002532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002534:	2b10      	cmp	r3, #16
 8002536:	d002      	beq.n	800253e <I2C_Master_ADDR+0x2d0>
 8002538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253a:	2b20      	cmp	r3, #32
 800253c:	d107      	bne.n	800254e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800254c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800256a:	e00b      	b.n	8002584 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
}
 8002582:	e7ff      	b.n	8002584 <I2C_Master_ADDR+0x316>
 8002584:	bf00      	nop
 8002586:	3744      	adds	r7, #68	; 0x44
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800259e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d02b      	beq.n	8002602 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	781a      	ldrb	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d114      	bne.n	8002602 <I2C_SlaveTransmit_TXE+0x72>
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
 80025da:	2b29      	cmp	r3, #41	; 0x29
 80025dc:	d111      	bne.n	8002602 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ec:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2221      	movs	r2, #33	; 0x21
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2228      	movs	r2, #40	; 0x28
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff f9f1 	bl	80019e4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002602:	bf00      	nop
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002616:	b29b      	uxth	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d011      	beq.n	8002640 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	781a      	ldrb	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	1c5a      	adds	r2, r3, #1
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002636:	b29b      	uxth	r3, r3
 8002638:	3b01      	subs	r3, #1
 800263a:	b29a      	uxth	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800265a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002660:	b29b      	uxth	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d02c      	beq.n	80026c0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	691a      	ldr	r2, [r3, #16]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	1c5a      	adds	r2, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002682:	b29b      	uxth	r3, r3
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002690:	b29b      	uxth	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d114      	bne.n	80026c0 <I2C_SlaveReceive_RXNE+0x74>
 8002696:	7bfb      	ldrb	r3, [r7, #15]
 8002698:	2b2a      	cmp	r3, #42	; 0x2a
 800269a:	d111      	bne.n	80026c0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026aa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2222      	movs	r2, #34	; 0x22
 80026b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2228      	movs	r2, #40	; 0x28
 80026b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff f99c 	bl	80019f8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80026c0:	bf00      	nop
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d012      	beq.n	8002700 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	691a      	ldr	r2, [r3, #16]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	3b01      	subs	r3, #1
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002716:	2300      	movs	r3, #0
 8002718:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002720:	b2db      	uxtb	r3, r3
 8002722:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002726:	2b28      	cmp	r3, #40	; 0x28
 8002728:	d127      	bne.n	800277a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002738:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	089b      	lsrs	r3, r3, #2
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002746:	2301      	movs	r3, #1
 8002748:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	09db      	lsrs	r3, r3, #7
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d103      	bne.n	800275e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	81bb      	strh	r3, [r7, #12]
 800275c:	e002      	b.n	8002764 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800276c:	89ba      	ldrh	r2, [r7, #12]
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	4619      	mov	r1, r3
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff f94a 	bl	8001a0c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002778:	e00e      	b.n	8002798 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800277a:	2300      	movs	r3, #0
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002798:	bf00      	nop
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ae:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027be:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80027c0:	2300      	movs	r3, #0
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0201 	orr.w	r2, r2, #1
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ec:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027fc:	d172      	bne.n	80028e4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
 8002800:	2b22      	cmp	r3, #34	; 0x22
 8002802:	d002      	beq.n	800280a <I2C_Slave_STOPF+0x6a>
 8002804:	7bfb      	ldrb	r3, [r7, #15]
 8002806:	2b2a      	cmp	r3, #42	; 0x2a
 8002808:	d135      	bne.n	8002876 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	b29a      	uxth	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281c:	b29b      	uxth	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d005      	beq.n	800282e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f043 0204 	orr.w	r2, r3, #4
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800283c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe fab3 	bl	8000dae <HAL_DMA_GetState>
 8002848:	4603      	mov	r3, r0
 800284a:	2b01      	cmp	r3, #1
 800284c:	d049      	beq.n	80028e2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002852:	4a69      	ldr	r2, [pc, #420]	; (80029f8 <I2C_Slave_STOPF+0x258>)
 8002854:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285a:	4618      	mov	r0, r3
 800285c:	f7fe fa85 	bl	8000d6a <HAL_DMA_Abort_IT>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d03d      	beq.n	80028e2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002870:	4610      	mov	r0, r2
 8002872:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002874:	e035      	b.n	80028e2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	b29a      	uxth	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002888:	b29b      	uxth	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d005      	beq.n	800289a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f043 0204 	orr.w	r2, r3, #4
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028a8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe fa7d 	bl	8000dae <HAL_DMA_GetState>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d014      	beq.n	80028e4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028be:	4a4e      	ldr	r2, [pc, #312]	; (80029f8 <I2C_Slave_STOPF+0x258>)
 80028c0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe fa4f 	bl	8000d6a <HAL_DMA_Abort_IT>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d008      	beq.n	80028e4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028dc:	4610      	mov	r0, r2
 80028de:	4798      	blx	r3
 80028e0:	e000      	b.n	80028e4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80028e2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d03e      	beq.n	800296c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d112      	bne.n	8002922 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	3b01      	subs	r3, #1
 800291c:	b29a      	uxth	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292c:	2b40      	cmp	r3, #64	; 0x40
 800292e:	d112      	bne.n	8002956 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	691a      	ldr	r2, [r3, #16]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294c:	b29b      	uxth	r3, r3
 800294e:	3b01      	subs	r3, #1
 8002950:	b29a      	uxth	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295a:	b29b      	uxth	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	f043 0204 	orr.w	r2, r3, #4
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f8b3 	bl	8002ae0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800297a:	e039      	b.n	80029f0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800297c:	7bfb      	ldrb	r3, [r7, #15]
 800297e:	2b2a      	cmp	r3, #42	; 0x2a
 8002980:	d109      	bne.n	8002996 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2228      	movs	r2, #40	; 0x28
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7ff f831 	bl	80019f8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b28      	cmp	r3, #40	; 0x28
 80029a0:	d111      	bne.n	80029c6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a15      	ldr	r2, [pc, #84]	; (80029fc <I2C_Slave_STOPF+0x25c>)
 80029a6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2220      	movs	r2, #32
 80029b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7ff f832 	bl	8001a28 <HAL_I2C_ListenCpltCallback>
}
 80029c4:	e014      	b.n	80029f0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	2b22      	cmp	r3, #34	; 0x22
 80029cc:	d002      	beq.n	80029d4 <I2C_Slave_STOPF+0x234>
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	2b22      	cmp	r3, #34	; 0x22
 80029d2:	d10d      	bne.n	80029f0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2220      	movs	r2, #32
 80029de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7ff f804 	bl	80019f8 <HAL_I2C_SlaveRxCpltCallback>
}
 80029f0:	bf00      	nop
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	08002e49 	.word	0x08002e49
 80029fc:	ffff0000 	.word	0xffff0000

08002a00 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d002      	beq.n	8002a22 <I2C_Slave_AF+0x22>
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2b20      	cmp	r3, #32
 8002a20:	d129      	bne.n	8002a76 <I2C_Slave_AF+0x76>
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	2b28      	cmp	r3, #40	; 0x28
 8002a26:	d126      	bne.n	8002a76 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a2c      	ldr	r2, [pc, #176]	; (8002adc <I2C_Slave_AF+0xdc>)
 8002a2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a3c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a46:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a56:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7fe ffda 	bl	8001a28 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002a74:	e02e      	b.n	8002ad4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
 8002a78:	2b21      	cmp	r3, #33	; 0x21
 8002a7a:	d126      	bne.n	8002aca <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a17      	ldr	r2, [pc, #92]	; (8002adc <I2C_Slave_AF+0xdc>)
 8002a80:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2221      	movs	r2, #33	; 0x21
 8002a86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002aa6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ab0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ac0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7fe ff8e 	bl	80019e4 <HAL_I2C_SlaveTxCpltCallback>
}
 8002ac8:	e004      	b.n	8002ad4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ad2:	615a      	str	r2, [r3, #20]
}
 8002ad4:	bf00      	nop
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	ffff0000 	.word	0xffff0000

08002ae0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002af6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002af8:	7bbb      	ldrb	r3, [r7, #14]
 8002afa:	2b10      	cmp	r3, #16
 8002afc:	d002      	beq.n	8002b04 <I2C_ITError+0x24>
 8002afe:	7bbb      	ldrb	r3, [r7, #14]
 8002b00:	2b40      	cmp	r3, #64	; 0x40
 8002b02:	d10a      	bne.n	8002b1a <I2C_ITError+0x3a>
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	2b22      	cmp	r3, #34	; 0x22
 8002b08:	d107      	bne.n	8002b1a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b18:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
 8002b1c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b20:	2b28      	cmp	r3, #40	; 0x28
 8002b22:	d107      	bne.n	8002b34 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2228      	movs	r2, #40	; 0x28
 8002b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002b32:	e015      	b.n	8002b60 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b42:	d00a      	beq.n	8002b5a <I2C_ITError+0x7a>
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
 8002b46:	2b60      	cmp	r3, #96	; 0x60
 8002b48:	d007      	beq.n	8002b5a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b6e:	d162      	bne.n	8002c36 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b7e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d020      	beq.n	8002bd0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b92:	4a6a      	ldr	r2, [pc, #424]	; (8002d3c <I2C_ITError+0x25c>)
 8002b94:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fe f8e5 	bl	8000d6a <HAL_DMA_Abort_IT>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 8089 	beq.w	8002cba <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0201 	bic.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bca:	4610      	mov	r0, r2
 8002bcc:	4798      	blx	r3
 8002bce:	e074      	b.n	8002cba <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd4:	4a59      	ldr	r2, [pc, #356]	; (8002d3c <I2C_ITError+0x25c>)
 8002bd6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7fe f8c4 	bl	8000d6a <HAL_DMA_Abort_IT>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d068      	beq.n	8002cba <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf2:	2b40      	cmp	r3, #64	; 0x40
 8002bf4:	d10b      	bne.n	8002c0e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0201 	bic.w	r2, r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2220      	movs	r2, #32
 8002c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c30:	4610      	mov	r0, r2
 8002c32:	4798      	blx	r3
 8002c34:	e041      	b.n	8002cba <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b60      	cmp	r3, #96	; 0x60
 8002c40:	d125      	bne.n	8002c8e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2220      	movs	r2, #32
 8002c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5a:	2b40      	cmp	r3, #64	; 0x40
 8002c5c:	d10b      	bne.n	8002c76 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	b2d2      	uxtb	r2, r2
 8002c6a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0201 	bic.w	r2, r2, #1
 8002c84:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7fe fef6 	bl	8001a78 <HAL_I2C_AbortCpltCallback>
 8002c8c:	e015      	b.n	8002cba <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c98:	2b40      	cmp	r3, #64	; 0x40
 8002c9a:	d10b      	bne.n	8002cb4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691a      	ldr	r2, [r3, #16]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7fe fed5 	bl	8001a64 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10e      	bne.n	8002ce8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d109      	bne.n	8002ce8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d104      	bne.n	8002ce8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d007      	beq.n	8002cf8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cf6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cfe:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d113      	bne.n	8002d34 <I2C_ITError+0x254>
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
 8002d0e:	2b28      	cmp	r3, #40	; 0x28
 8002d10:	d110      	bne.n	8002d34 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a0a      	ldr	r2, [pc, #40]	; (8002d40 <I2C_ITError+0x260>)
 8002d16:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7fe fe7a 	bl	8001a28 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d34:	bf00      	nop
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	08002e49 	.word	0x08002e49
 8002d40:	ffff0000 	.word	0xffff0000

08002d44 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	607a      	str	r2, [r7, #4]
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	460b      	mov	r3, r1
 8002d52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d006      	beq.n	8002d6e <I2C_MasterRequestWrite+0x2a>
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d003      	beq.n	8002d6e <I2C_MasterRequestWrite+0x2a>
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d6c:	d108      	bne.n	8002d80 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	e00b      	b.n	8002d98 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	2b12      	cmp	r3, #18
 8002d86:	d107      	bne.n	8002d98 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 f8f7 	bl	8002f98 <I2C_WaitOnFlagUntilTimeout>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00d      	beq.n	8002dcc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dbe:	d103      	bne.n	8002dc8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e035      	b.n	8002e38 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dd4:	d108      	bne.n	8002de8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dd6:	897b      	ldrh	r3, [r7, #10]
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	461a      	mov	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002de4:	611a      	str	r2, [r3, #16]
 8002de6:	e01b      	b.n	8002e20 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002de8:	897b      	ldrh	r3, [r7, #10]
 8002dea:	11db      	asrs	r3, r3, #7
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	f003 0306 	and.w	r3, r3, #6
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	f063 030f 	orn	r3, r3, #15
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	490e      	ldr	r1, [pc, #56]	; (8002e40 <I2C_MasterRequestWrite+0xfc>)
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 f91d 	bl	8003046 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e010      	b.n	8002e38 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e16:	897b      	ldrh	r3, [r7, #10]
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	4907      	ldr	r1, [pc, #28]	; (8002e44 <I2C_MasterRequestWrite+0x100>)
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 f90d 	bl	8003046 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e000      	b.n	8002e38 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	00010008 	.word	0x00010008
 8002e44:	00010002 	.word	0x00010002

08002e48 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e58:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e60:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e62:	4b4b      	ldr	r3, [pc, #300]	; (8002f90 <I2C_DMAAbort+0x148>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	08db      	lsrs	r3, r3, #3
 8002e68:	4a4a      	ldr	r2, [pc, #296]	; (8002f94 <I2C_DMAAbort+0x14c>)
 8002e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6e:	0a1a      	lsrs	r2, r3, #8
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	00da      	lsls	r2, r3, #3
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f043 0220 	orr.w	r2, r3, #32
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002e8e:	e00a      	b.n	8002ea6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ea4:	d0ea      	beq.n	8002e7c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee8:	2200      	movs	r2, #0
 8002eea:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef8:	2200      	movs	r2, #0
 8002efa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0201 	bic.w	r2, r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b60      	cmp	r3, #96	; 0x60
 8002f16:	d10e      	bne.n	8002f36 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002f2e:	6978      	ldr	r0, [r7, #20]
 8002f30:	f7fe fda2 	bl	8001a78 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f34:	e027      	b.n	8002f86 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f36:	7cfb      	ldrb	r3, [r7, #19]
 8002f38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f3c:	2b28      	cmp	r3, #40	; 0x28
 8002f3e:	d117      	bne.n	8002f70 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0201 	orr.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f5e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	2200      	movs	r2, #0
 8002f64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2228      	movs	r2, #40	; 0x28
 8002f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002f6e:	e007      	b.n	8002f80 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	2220      	movs	r2, #32
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002f80:	6978      	ldr	r0, [r7, #20]
 8002f82:	f7fe fd6f 	bl	8001a64 <HAL_I2C_ErrorCallback>
}
 8002f86:	bf00      	nop
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000000 	.word	0x20000000
 8002f94:	14f8b589 	.word	0x14f8b589

08002f98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	603b      	str	r3, [r7, #0]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fa8:	e025      	b.n	8002ff6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb0:	d021      	beq.n	8002ff6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb2:	f7fd fd99 	bl	8000ae8 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d302      	bcc.n	8002fc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d116      	bne.n	8002ff6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	f043 0220 	orr.w	r2, r3, #32
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e023      	b.n	800303e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	0c1b      	lsrs	r3, r3, #16
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d10d      	bne.n	800301c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	43da      	mvns	r2, r3
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	4013      	ands	r3, r2
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	bf0c      	ite	eq
 8003012:	2301      	moveq	r3, #1
 8003014:	2300      	movne	r3, #0
 8003016:	b2db      	uxtb	r3, r3
 8003018:	461a      	mov	r2, r3
 800301a:	e00c      	b.n	8003036 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	43da      	mvns	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	4013      	ands	r3, r2
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	bf0c      	ite	eq
 800302e:	2301      	moveq	r3, #1
 8003030:	2300      	movne	r3, #0
 8003032:	b2db      	uxtb	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	429a      	cmp	r2, r3
 800303a:	d0b6      	beq.n	8002faa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b084      	sub	sp, #16
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	607a      	str	r2, [r7, #4]
 8003052:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003054:	e051      	b.n	80030fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003064:	d123      	bne.n	80030ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003074:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800307e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2220      	movs	r2, #32
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	f043 0204 	orr.w	r2, r3, #4
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e046      	b.n	800313c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b4:	d021      	beq.n	80030fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b6:	f7fd fd17 	bl	8000ae8 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d302      	bcc.n	80030cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d116      	bne.n	80030fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f043 0220 	orr.w	r2, r3, #32
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e020      	b.n	800313c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	0c1b      	lsrs	r3, r3, #16
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b01      	cmp	r3, #1
 8003102:	d10c      	bne.n	800311e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	43da      	mvns	r2, r3
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	4013      	ands	r3, r2
 8003110:	b29b      	uxth	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	bf14      	ite	ne
 8003116:	2301      	movne	r3, #1
 8003118:	2300      	moveq	r3, #0
 800311a:	b2db      	uxtb	r3, r3
 800311c:	e00b      	b.n	8003136 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	43da      	mvns	r2, r3
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	4013      	ands	r3, r2
 800312a:	b29b      	uxth	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	bf14      	ite	ne
 8003130:	2301      	movne	r3, #1
 8003132:	2300      	moveq	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d18d      	bne.n	8003056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003150:	e02d      	b.n	80031ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f8aa 	bl	80032ac <I2C_IsAcknowledgeFailed>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e02d      	b.n	80031be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003168:	d021      	beq.n	80031ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800316a:	f7fd fcbd 	bl	8000ae8 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	429a      	cmp	r2, r3
 8003178:	d302      	bcc.n	8003180 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d116      	bne.n	80031ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f043 0220 	orr.w	r2, r3, #32
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e007      	b.n	80031be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b8:	2b80      	cmp	r3, #128	; 0x80
 80031ba:	d1ca      	bne.n	8003152 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031d2:	e02d      	b.n	8003230 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 f869 	bl	80032ac <I2C_IsAcknowledgeFailed>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e02d      	b.n	8003240 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ea:	d021      	beq.n	8003230 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ec:	f7fd fc7c 	bl	8000ae8 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d302      	bcc.n	8003202 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d116      	bne.n	8003230 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	f043 0220 	orr.w	r2, r3, #32
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e007      	b.n	8003240 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b04      	cmp	r3, #4
 800323c:	d1ca      	bne.n	80031d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003254:	4b13      	ldr	r3, [pc, #76]	; (80032a4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	08db      	lsrs	r3, r3, #3
 800325a:	4a13      	ldr	r2, [pc, #76]	; (80032a8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800325c:	fba2 2303 	umull	r2, r3, r2, r3
 8003260:	0a1a      	lsrs	r2, r3, #8
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	3b01      	subs	r3, #1
 800326e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d107      	bne.n	8003286 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	f043 0220 	orr.w	r2, r3, #32
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e008      	b.n	8003298 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003294:	d0e9      	beq.n	800326a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	20000000 	.word	0x20000000
 80032a8:	14f8b589 	.word	0x14f8b589

080032ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c2:	d11b      	bne.n	80032fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	f043 0204 	orr.w	r2, r3, #4
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e000      	b.n	80032fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003316:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800331a:	d103      	bne.n	8003324 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003322:	e007      	b.n	8003334 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800332c:	d102      	bne.n	8003334 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2208      	movs	r2, #8
 8003332:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e264      	b.n	800381c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d075      	beq.n	800344a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800335e:	4ba3      	ldr	r3, [pc, #652]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 030c 	and.w	r3, r3, #12
 8003366:	2b04      	cmp	r3, #4
 8003368:	d00c      	beq.n	8003384 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800336a:	4ba0      	ldr	r3, [pc, #640]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003372:	2b08      	cmp	r3, #8
 8003374:	d112      	bne.n	800339c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003376:	4b9d      	ldr	r3, [pc, #628]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800337e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003382:	d10b      	bne.n	800339c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003384:	4b99      	ldr	r3, [pc, #612]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d05b      	beq.n	8003448 <HAL_RCC_OscConfig+0x108>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d157      	bne.n	8003448 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e23f      	b.n	800381c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a4:	d106      	bne.n	80033b4 <HAL_RCC_OscConfig+0x74>
 80033a6:	4b91      	ldr	r3, [pc, #580]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a90      	ldr	r2, [pc, #576]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80033ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	e01d      	b.n	80033f0 <HAL_RCC_OscConfig+0xb0>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033bc:	d10c      	bne.n	80033d8 <HAL_RCC_OscConfig+0x98>
 80033be:	4b8b      	ldr	r3, [pc, #556]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a8a      	ldr	r2, [pc, #552]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80033c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	4b88      	ldr	r3, [pc, #544]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a87      	ldr	r2, [pc, #540]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80033d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	e00b      	b.n	80033f0 <HAL_RCC_OscConfig+0xb0>
 80033d8:	4b84      	ldr	r3, [pc, #528]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a83      	ldr	r2, [pc, #524]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80033de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	4b81      	ldr	r3, [pc, #516]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a80      	ldr	r2, [pc, #512]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80033ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d013      	beq.n	8003420 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7fd fb76 	bl	8000ae8 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003400:	f7fd fb72 	bl	8000ae8 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b64      	cmp	r3, #100	; 0x64
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e204      	b.n	800381c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003412:	4b76      	ldr	r3, [pc, #472]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f0      	beq.n	8003400 <HAL_RCC_OscConfig+0xc0>
 800341e:	e014      	b.n	800344a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003420:	f7fd fb62 	bl	8000ae8 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003428:	f7fd fb5e 	bl	8000ae8 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e1f0      	b.n	800381c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800343a:	4b6c      	ldr	r3, [pc, #432]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0xe8>
 8003446:	e000      	b.n	800344a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d063      	beq.n	800351e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003456:	4b65      	ldr	r3, [pc, #404]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 030c 	and.w	r3, r3, #12
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00b      	beq.n	800347a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003462:	4b62      	ldr	r3, [pc, #392]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800346a:	2b08      	cmp	r3, #8
 800346c:	d11c      	bne.n	80034a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800346e:	4b5f      	ldr	r3, [pc, #380]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d116      	bne.n	80034a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800347a:	4b5c      	ldr	r3, [pc, #368]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d005      	beq.n	8003492 <HAL_RCC_OscConfig+0x152>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d001      	beq.n	8003492 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e1c4      	b.n	800381c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003492:	4b56      	ldr	r3, [pc, #344]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	4952      	ldr	r1, [pc, #328]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034a6:	e03a      	b.n	800351e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d020      	beq.n	80034f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034b0:	4b4f      	ldr	r3, [pc, #316]	; (80035f0 <HAL_RCC_OscConfig+0x2b0>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b6:	f7fd fb17 	bl	8000ae8 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034be:	f7fd fb13 	bl	8000ae8 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e1a5      	b.n	800381c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d0:	4b46      	ldr	r3, [pc, #280]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0f0      	beq.n	80034be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034dc:	4b43      	ldr	r3, [pc, #268]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	4940      	ldr	r1, [pc, #256]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	600b      	str	r3, [r1, #0]
 80034f0:	e015      	b.n	800351e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034f2:	4b3f      	ldr	r3, [pc, #252]	; (80035f0 <HAL_RCC_OscConfig+0x2b0>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f8:	f7fd faf6 	bl	8000ae8 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003500:	f7fd faf2 	bl	8000ae8 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e184      	b.n	800381c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003512:	4b36      	ldr	r3, [pc, #216]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b00      	cmp	r3, #0
 8003528:	d030      	beq.n	800358c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d016      	beq.n	8003560 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003532:	4b30      	ldr	r3, [pc, #192]	; (80035f4 <HAL_RCC_OscConfig+0x2b4>)
 8003534:	2201      	movs	r2, #1
 8003536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003538:	f7fd fad6 	bl	8000ae8 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003540:	f7fd fad2 	bl	8000ae8 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e164      	b.n	800381c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003552:	4b26      	ldr	r3, [pc, #152]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 8003554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0f0      	beq.n	8003540 <HAL_RCC_OscConfig+0x200>
 800355e:	e015      	b.n	800358c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003560:	4b24      	ldr	r3, [pc, #144]	; (80035f4 <HAL_RCC_OscConfig+0x2b4>)
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003566:	f7fd fabf 	bl	8000ae8 <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800356e:	f7fd fabb 	bl	8000ae8 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e14d      	b.n	800381c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003580:	4b1a      	ldr	r3, [pc, #104]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 8003582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1f0      	bne.n	800356e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80a0 	beq.w	80036da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800359a:	2300      	movs	r3, #0
 800359c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800359e:	4b13      	ldr	r3, [pc, #76]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10f      	bne.n	80035ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035aa:	2300      	movs	r3, #0
 80035ac:	60bb      	str	r3, [r7, #8]
 80035ae:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	4a0e      	ldr	r2, [pc, #56]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80035b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b8:	6413      	str	r3, [r2, #64]	; 0x40
 80035ba:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c2:	60bb      	str	r3, [r7, #8]
 80035c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035c6:	2301      	movs	r3, #1
 80035c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ca:	4b0b      	ldr	r3, [pc, #44]	; (80035f8 <HAL_RCC_OscConfig+0x2b8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d121      	bne.n	800361a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035d6:	4b08      	ldr	r3, [pc, #32]	; (80035f8 <HAL_RCC_OscConfig+0x2b8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a07      	ldr	r2, [pc, #28]	; (80035f8 <HAL_RCC_OscConfig+0x2b8>)
 80035dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035e2:	f7fd fa81 	bl	8000ae8 <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e8:	e011      	b.n	800360e <HAL_RCC_OscConfig+0x2ce>
 80035ea:	bf00      	nop
 80035ec:	40023800 	.word	0x40023800
 80035f0:	42470000 	.word	0x42470000
 80035f4:	42470e80 	.word	0x42470e80
 80035f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fc:	f7fd fa74 	bl	8000ae8 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e106      	b.n	800381c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360e:	4b85      	ldr	r3, [pc, #532]	; (8003824 <HAL_RCC_OscConfig+0x4e4>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0f0      	beq.n	80035fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d106      	bne.n	8003630 <HAL_RCC_OscConfig+0x2f0>
 8003622:	4b81      	ldr	r3, [pc, #516]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 8003624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003626:	4a80      	ldr	r2, [pc, #512]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 8003628:	f043 0301 	orr.w	r3, r3, #1
 800362c:	6713      	str	r3, [r2, #112]	; 0x70
 800362e:	e01c      	b.n	800366a <HAL_RCC_OscConfig+0x32a>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b05      	cmp	r3, #5
 8003636:	d10c      	bne.n	8003652 <HAL_RCC_OscConfig+0x312>
 8003638:	4b7b      	ldr	r3, [pc, #492]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 800363a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363c:	4a7a      	ldr	r2, [pc, #488]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 800363e:	f043 0304 	orr.w	r3, r3, #4
 8003642:	6713      	str	r3, [r2, #112]	; 0x70
 8003644:	4b78      	ldr	r3, [pc, #480]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 8003646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003648:	4a77      	ldr	r2, [pc, #476]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	6713      	str	r3, [r2, #112]	; 0x70
 8003650:	e00b      	b.n	800366a <HAL_RCC_OscConfig+0x32a>
 8003652:	4b75      	ldr	r3, [pc, #468]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	4a74      	ldr	r2, [pc, #464]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 8003658:	f023 0301 	bic.w	r3, r3, #1
 800365c:	6713      	str	r3, [r2, #112]	; 0x70
 800365e:	4b72      	ldr	r3, [pc, #456]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 8003660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003662:	4a71      	ldr	r2, [pc, #452]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 8003664:	f023 0304 	bic.w	r3, r3, #4
 8003668:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d015      	beq.n	800369e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003672:	f7fd fa39 	bl	8000ae8 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003678:	e00a      	b.n	8003690 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800367a:	f7fd fa35 	bl	8000ae8 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	f241 3288 	movw	r2, #5000	; 0x1388
 8003688:	4293      	cmp	r3, r2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e0c5      	b.n	800381c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003690:	4b65      	ldr	r3, [pc, #404]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 8003692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0ee      	beq.n	800367a <HAL_RCC_OscConfig+0x33a>
 800369c:	e014      	b.n	80036c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800369e:	f7fd fa23 	bl	8000ae8 <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a4:	e00a      	b.n	80036bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a6:	f7fd fa1f 	bl	8000ae8 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e0af      	b.n	800381c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036bc:	4b5a      	ldr	r3, [pc, #360]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 80036be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1ee      	bne.n	80036a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036c8:	7dfb      	ldrb	r3, [r7, #23]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d105      	bne.n	80036da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ce:	4b56      	ldr	r3, [pc, #344]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	4a55      	ldr	r2, [pc, #340]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 80036d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 809b 	beq.w	800381a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036e4:	4b50      	ldr	r3, [pc, #320]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 030c 	and.w	r3, r3, #12
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	d05c      	beq.n	80037aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d141      	bne.n	800377c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f8:	4b4c      	ldr	r3, [pc, #304]	; (800382c <HAL_RCC_OscConfig+0x4ec>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fe:	f7fd f9f3 	bl	8000ae8 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003706:	f7fd f9ef 	bl	8000ae8 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e081      	b.n	800381c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003718:	4b43      	ldr	r3, [pc, #268]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1f0      	bne.n	8003706 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	69da      	ldr	r2, [r3, #28]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	431a      	orrs	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	019b      	lsls	r3, r3, #6
 8003734:	431a      	orrs	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373a:	085b      	lsrs	r3, r3, #1
 800373c:	3b01      	subs	r3, #1
 800373e:	041b      	lsls	r3, r3, #16
 8003740:	431a      	orrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	061b      	lsls	r3, r3, #24
 8003748:	4937      	ldr	r1, [pc, #220]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 800374a:	4313      	orrs	r3, r2
 800374c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800374e:	4b37      	ldr	r3, [pc, #220]	; (800382c <HAL_RCC_OscConfig+0x4ec>)
 8003750:	2201      	movs	r2, #1
 8003752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003754:	f7fd f9c8 	bl	8000ae8 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800375c:	f7fd f9c4 	bl	8000ae8 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e056      	b.n	800381c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800376e:	4b2e      	ldr	r3, [pc, #184]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f0      	beq.n	800375c <HAL_RCC_OscConfig+0x41c>
 800377a:	e04e      	b.n	800381a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800377c:	4b2b      	ldr	r3, [pc, #172]	; (800382c <HAL_RCC_OscConfig+0x4ec>)
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003782:	f7fd f9b1 	bl	8000ae8 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800378a:	f7fd f9ad 	bl	8000ae8 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e03f      	b.n	800381c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800379c:	4b22      	ldr	r3, [pc, #136]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1f0      	bne.n	800378a <HAL_RCC_OscConfig+0x44a>
 80037a8:	e037      	b.n	800381a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d101      	bne.n	80037b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e032      	b.n	800381c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037b6:	4b1c      	ldr	r3, [pc, #112]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d028      	beq.n	8003816 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d121      	bne.n	8003816 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037dc:	429a      	cmp	r2, r3
 80037de:	d11a      	bne.n	8003816 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037e6:	4013      	ands	r3, r2
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037ec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d111      	bne.n	8003816 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fc:	085b      	lsrs	r3, r3, #1
 80037fe:	3b01      	subs	r3, #1
 8003800:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003802:	429a      	cmp	r2, r3
 8003804:	d107      	bne.n	8003816 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003812:	429a      	cmp	r2, r3
 8003814:	d001      	beq.n	800381a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e000      	b.n	800381c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40007000 	.word	0x40007000
 8003828:	40023800 	.word	0x40023800
 800382c:	42470060 	.word	0x42470060

08003830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e0cc      	b.n	80039de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003844:	4b68      	ldr	r3, [pc, #416]	; (80039e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d90c      	bls.n	800386c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003852:	4b65      	ldr	r3, [pc, #404]	; (80039e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800385a:	4b63      	ldr	r3, [pc, #396]	; (80039e8 <HAL_RCC_ClockConfig+0x1b8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d001      	beq.n	800386c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e0b8      	b.n	80039de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d020      	beq.n	80038ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003884:	4b59      	ldr	r3, [pc, #356]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	4a58      	ldr	r2, [pc, #352]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 800388a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800388e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0308 	and.w	r3, r3, #8
 8003898:	2b00      	cmp	r3, #0
 800389a:	d005      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800389c:	4b53      	ldr	r3, [pc, #332]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	4a52      	ldr	r2, [pc, #328]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038a8:	4b50      	ldr	r3, [pc, #320]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	494d      	ldr	r1, [pc, #308]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d044      	beq.n	8003950 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d107      	bne.n	80038de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ce:	4b47      	ldr	r3, [pc, #284]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d119      	bne.n	800390e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e07f      	b.n	80039de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d003      	beq.n	80038ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d107      	bne.n	80038fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ee:	4b3f      	ldr	r3, [pc, #252]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d109      	bne.n	800390e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e06f      	b.n	80039de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038fe:	4b3b      	ldr	r3, [pc, #236]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e067      	b.n	80039de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800390e:	4b37      	ldr	r3, [pc, #220]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f023 0203 	bic.w	r2, r3, #3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	4934      	ldr	r1, [pc, #208]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 800391c:	4313      	orrs	r3, r2
 800391e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003920:	f7fd f8e2 	bl	8000ae8 <HAL_GetTick>
 8003924:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003926:	e00a      	b.n	800393e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003928:	f7fd f8de 	bl	8000ae8 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	f241 3288 	movw	r2, #5000	; 0x1388
 8003936:	4293      	cmp	r3, r2
 8003938:	d901      	bls.n	800393e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e04f      	b.n	80039de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393e:	4b2b      	ldr	r3, [pc, #172]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 020c 	and.w	r2, r3, #12
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	429a      	cmp	r2, r3
 800394e:	d1eb      	bne.n	8003928 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003950:	4b25      	ldr	r3, [pc, #148]	; (80039e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d20c      	bcs.n	8003978 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395e:	4b22      	ldr	r3, [pc, #136]	; (80039e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003966:	4b20      	ldr	r3, [pc, #128]	; (80039e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d001      	beq.n	8003978 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e032      	b.n	80039de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003984:	4b19      	ldr	r3, [pc, #100]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	4916      	ldr	r1, [pc, #88]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 8003992:	4313      	orrs	r3, r2
 8003994:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d009      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039a2:	4b12      	ldr	r3, [pc, #72]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	490e      	ldr	r1, [pc, #56]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039b6:	f000 f821 	bl	80039fc <HAL_RCC_GetSysClockFreq>
 80039ba:	4602      	mov	r2, r0
 80039bc:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	091b      	lsrs	r3, r3, #4
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	490a      	ldr	r1, [pc, #40]	; (80039f0 <HAL_RCC_ClockConfig+0x1c0>)
 80039c8:	5ccb      	ldrb	r3, [r1, r3]
 80039ca:	fa22 f303 	lsr.w	r3, r2, r3
 80039ce:	4a09      	ldr	r2, [pc, #36]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 80039d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039d2:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fd f842 	bl	8000a60 <HAL_InitTick>

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40023c00 	.word	0x40023c00
 80039ec:	40023800 	.word	0x40023800
 80039f0:	08003c18 	.word	0x08003c18
 80039f4:	20000000 	.word	0x20000000
 80039f8:	20000004 	.word	0x20000004

080039fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039fc:	b5b0      	push	{r4, r5, r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a02:	2100      	movs	r1, #0
 8003a04:	6079      	str	r1, [r7, #4]
 8003a06:	2100      	movs	r1, #0
 8003a08:	60f9      	str	r1, [r7, #12]
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a0e:	2100      	movs	r1, #0
 8003a10:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a12:	4952      	ldr	r1, [pc, #328]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a14:	6889      	ldr	r1, [r1, #8]
 8003a16:	f001 010c 	and.w	r1, r1, #12
 8003a1a:	2908      	cmp	r1, #8
 8003a1c:	d00d      	beq.n	8003a3a <HAL_RCC_GetSysClockFreq+0x3e>
 8003a1e:	2908      	cmp	r1, #8
 8003a20:	f200 8094 	bhi.w	8003b4c <HAL_RCC_GetSysClockFreq+0x150>
 8003a24:	2900      	cmp	r1, #0
 8003a26:	d002      	beq.n	8003a2e <HAL_RCC_GetSysClockFreq+0x32>
 8003a28:	2904      	cmp	r1, #4
 8003a2a:	d003      	beq.n	8003a34 <HAL_RCC_GetSysClockFreq+0x38>
 8003a2c:	e08e      	b.n	8003b4c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a2e:	4b4c      	ldr	r3, [pc, #304]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x164>)
 8003a30:	60bb      	str	r3, [r7, #8]
       break;
 8003a32:	e08e      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a34:	4b4b      	ldr	r3, [pc, #300]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x168>)
 8003a36:	60bb      	str	r3, [r7, #8]
      break;
 8003a38:	e08b      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a3a:	4948      	ldr	r1, [pc, #288]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a3c:	6849      	ldr	r1, [r1, #4]
 8003a3e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003a42:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a44:	4945      	ldr	r1, [pc, #276]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a46:	6849      	ldr	r1, [r1, #4]
 8003a48:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003a4c:	2900      	cmp	r1, #0
 8003a4e:	d024      	beq.n	8003a9a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a50:	4942      	ldr	r1, [pc, #264]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a52:	6849      	ldr	r1, [r1, #4]
 8003a54:	0989      	lsrs	r1, r1, #6
 8003a56:	4608      	mov	r0, r1
 8003a58:	f04f 0100 	mov.w	r1, #0
 8003a5c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003a60:	f04f 0500 	mov.w	r5, #0
 8003a64:	ea00 0204 	and.w	r2, r0, r4
 8003a68:	ea01 0305 	and.w	r3, r1, r5
 8003a6c:	493d      	ldr	r1, [pc, #244]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x168>)
 8003a6e:	fb01 f003 	mul.w	r0, r1, r3
 8003a72:	2100      	movs	r1, #0
 8003a74:	fb01 f102 	mul.w	r1, r1, r2
 8003a78:	1844      	adds	r4, r0, r1
 8003a7a:	493a      	ldr	r1, [pc, #232]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x168>)
 8003a7c:	fba2 0101 	umull	r0, r1, r2, r1
 8003a80:	1863      	adds	r3, r4, r1
 8003a82:	4619      	mov	r1, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	461a      	mov	r2, r3
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	f7fc fba2 	bl	80001d4 <__aeabi_uldivmod>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4613      	mov	r3, r2
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	e04a      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a9a:	4b30      	ldr	r3, [pc, #192]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	099b      	lsrs	r3, r3, #6
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	f04f 0300 	mov.w	r3, #0
 8003aa6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003aaa:	f04f 0100 	mov.w	r1, #0
 8003aae:	ea02 0400 	and.w	r4, r2, r0
 8003ab2:	ea03 0501 	and.w	r5, r3, r1
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	4629      	mov	r1, r5
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	014b      	lsls	r3, r1, #5
 8003ac4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ac8:	0142      	lsls	r2, r0, #5
 8003aca:	4610      	mov	r0, r2
 8003acc:	4619      	mov	r1, r3
 8003ace:	1b00      	subs	r0, r0, r4
 8003ad0:	eb61 0105 	sbc.w	r1, r1, r5
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	018b      	lsls	r3, r1, #6
 8003ade:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ae2:	0182      	lsls	r2, r0, #6
 8003ae4:	1a12      	subs	r2, r2, r0
 8003ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8003aea:	f04f 0000 	mov.w	r0, #0
 8003aee:	f04f 0100 	mov.w	r1, #0
 8003af2:	00d9      	lsls	r1, r3, #3
 8003af4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003af8:	00d0      	lsls	r0, r2, #3
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	1912      	adds	r2, r2, r4
 8003b00:	eb45 0303 	adc.w	r3, r5, r3
 8003b04:	f04f 0000 	mov.w	r0, #0
 8003b08:	f04f 0100 	mov.w	r1, #0
 8003b0c:	0299      	lsls	r1, r3, #10
 8003b0e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b12:	0290      	lsls	r0, r2, #10
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	4610      	mov	r0, r2
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	f7fc fb56 	bl	80001d4 <__aeabi_uldivmod>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b30:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	0c1b      	lsrs	r3, r3, #16
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b48:	60bb      	str	r3, [r7, #8]
      break;
 8003b4a:	e002      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b4c:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x164>)
 8003b4e:	60bb      	str	r3, [r7, #8]
      break;
 8003b50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b52:	68bb      	ldr	r3, [r7, #8]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	00f42400 	.word	0x00f42400
 8003b64:	017d7840 	.word	0x017d7840

08003b68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b6c:	4b03      	ldr	r3, [pc, #12]	; (8003b7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	20000000 	.word	0x20000000

08003b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b84:	f7ff fff0 	bl	8003b68 <HAL_RCC_GetHCLKFreq>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	0a9b      	lsrs	r3, r3, #10
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	4903      	ldr	r1, [pc, #12]	; (8003ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b96:	5ccb      	ldrb	r3, [r1, r3]
 8003b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	08003c28 	.word	0x08003c28

08003ba8 <__libc_init_array>:
 8003ba8:	b570      	push	{r4, r5, r6, lr}
 8003baa:	4d0d      	ldr	r5, [pc, #52]	; (8003be0 <__libc_init_array+0x38>)
 8003bac:	4c0d      	ldr	r4, [pc, #52]	; (8003be4 <__libc_init_array+0x3c>)
 8003bae:	1b64      	subs	r4, r4, r5
 8003bb0:	10a4      	asrs	r4, r4, #2
 8003bb2:	2600      	movs	r6, #0
 8003bb4:	42a6      	cmp	r6, r4
 8003bb6:	d109      	bne.n	8003bcc <__libc_init_array+0x24>
 8003bb8:	4d0b      	ldr	r5, [pc, #44]	; (8003be8 <__libc_init_array+0x40>)
 8003bba:	4c0c      	ldr	r4, [pc, #48]	; (8003bec <__libc_init_array+0x44>)
 8003bbc:	f000 f820 	bl	8003c00 <_init>
 8003bc0:	1b64      	subs	r4, r4, r5
 8003bc2:	10a4      	asrs	r4, r4, #2
 8003bc4:	2600      	movs	r6, #0
 8003bc6:	42a6      	cmp	r6, r4
 8003bc8:	d105      	bne.n	8003bd6 <__libc_init_array+0x2e>
 8003bca:	bd70      	pop	{r4, r5, r6, pc}
 8003bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bd0:	4798      	blx	r3
 8003bd2:	3601      	adds	r6, #1
 8003bd4:	e7ee      	b.n	8003bb4 <__libc_init_array+0xc>
 8003bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bda:	4798      	blx	r3
 8003bdc:	3601      	adds	r6, #1
 8003bde:	e7f2      	b.n	8003bc6 <__libc_init_array+0x1e>
 8003be0:	08003c38 	.word	0x08003c38
 8003be4:	08003c38 	.word	0x08003c38
 8003be8:	08003c38 	.word	0x08003c38
 8003bec:	08003c3c 	.word	0x08003c3c

08003bf0 <memset>:
 8003bf0:	4402      	add	r2, r0
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d100      	bne.n	8003bfa <memset+0xa>
 8003bf8:	4770      	bx	lr
 8003bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8003bfe:	e7f9      	b.n	8003bf4 <memset+0x4>

08003c00 <_init>:
 8003c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c02:	bf00      	nop
 8003c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c06:	bc08      	pop	{r3}
 8003c08:	469e      	mov	lr, r3
 8003c0a:	4770      	bx	lr

08003c0c <_fini>:
 8003c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0e:	bf00      	nop
 8003c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c12:	bc08      	pop	{r3}
 8003c14:	469e      	mov	lr, r3
 8003c16:	4770      	bx	lr
